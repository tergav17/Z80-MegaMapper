              	; --------------------------------------
              	; zasm: assemble "KSG1000.asm"
              	; date: 2024-08-15 23:46:53
              	; --------------------------------------


              	;
              	;********************************************************************
              	;*
              	;*        K R I S Y S   S G 1 0 0 0   C O R E
              	;*
              	;********************************************************************
              	
              	#include "KRISYS.asm"
              	;
              	;********************************************************************
              	;*
              	;*              I D E N T I T Y   K R I S Y S
              	;*
              	;*      The [K]lunkly [R]emapper / [I]nterpreter [SYS]tem
              	;*
              	;*             Written by Gavin Tersteeg, 2024
              	;*              Copyleft, All Wrongs Reserved
              	;*
              	;*
              	;*   This piece of software allows different classic Z80 systems
              	;*   to run as "virtual machines" on top of existing hardware by
              	;*   use of a ZMM (Z80 MEGAMAPPER). It does this by remapping RAM
              	;*   and I/O address space ot match that of it's target system.
              	;*   Anything that can't be emulated by simple remapping is instead
              	;*   interpreted using I/O traps. 
              	;*
              	;*   This allows virtualized machines to run with an acceptable
              	;*   degree of speed and accuracy. While the ZMM is still quite
              	;*   limited in what sort of hardware can be efficiently virtualized,
              	;*   anything that avoids MMIO or graphics hardware that isn't a VDP
              	;*   generally can be made to work.
              	;* 
              	;********************************************************************
              		
              	; ----------------------------
              	; ******** ZASM Setup ********
              	; ----------------------------
              	
0020:         	stack_size = 0x20
              	
              	#target BIN
0100:         	#code	_TEXT,0x0100	; Setup to run as a CP/M executable
0488:         	#code	_DATA,_TEXT_end
0565:         	#data	_BSS,_DATA_end
              	
              	; Make sure w don't overrun available memory
              	#assert	_BSS_end < (zmm_capture-stack_size)
              	
              	.area	_TEXT
0100: C32A04  		jp	kri_start
              	
              	; -------------------------
              	; ******** Equates ********
              	; -------------------------
              	
              	; CP/M Stuff
0005:         	bdos		equ	0x0005
0000:         	bdos_exit	equ	0x00
0001:         	bdos_con_in	equ	0x01
0002:         	bdos_con_out	equ	0x02
0009:         	bdos_print	equ	0x09
000F:         	bdos_open	equ	0x0F
0014:         	bdos_read	equ	0x14
001A:         	bios_set_dma	equ	0x1A
              	
0080:         	cpm_command	equ	0x0080
              	
              	; Z80 MEGAMAPPER Stuff
0030:         	zmm_bnk0	equ	0x30	; 16K Bank 0 (0x0000 - 0x3FFF)
0031:         	zmm_bnk1	equ	0x31	; 16K Bank 1 (0x4000 - 0x7FFF)
0032:         	zmm_bnk2	equ	0x32	; 16K Bank 2 (0x8000 - 0xBFFF)
0033:         	zmm_bnk3	equ	0x33	; 16K Bank 3 (0xC000 - 0xFFFF)
0034:         	zmm_ctrl	equ	0x34	; ZMM Control Register
0030:         	zmm_isr		equ	0x30	; ZMM Trapped Instruction Register
0032:         	zmm_addr_hi	equ	0x32	; ZMM Trap Address High
0033:         	zmm_addr_lo	equ	0x33	; ZMM Trap Address Low
0037:         	zmm_trap	equ	0x37 	; ZMM Trap Vector
              	
7000:         	zmm_capture	equ	0x7000
8000:         	zmm_map		equ	0x8000
C000:         	zmm_top		equ	0xC000
              	
0070:         	zmm_capt_set	equ	0b01110000
007F:         	zmm_capt_res	equ	0b01111111
              	
              	; General Z80 Stuff
0066:         	nmi_address	equ	0x0066
0067:         	nmi_vector	equ	nmi_address+1
              	
              	; NABU Specific Stuff
0000:         	nabu_nctl	equ	0x00	; NABU Control Register
0040:         	nabu_ay_data	equ	0x40	; AY-3-8910 Data Port
0041:         	nabu_at_latch	equ	0x41	; AY-3-8910 Latch Port
              	
              	; -------------------------------------
              	; ******** Additional Includes ********
              	; -------------------------------------
              	
              	#include "MEMORY.asm"
              	;
              	;********************************************************************
              	;*
              	;*                    Z M M   M E M O R Y
              	;* 
              	;*    The ZMM can be configured to have different amounts
              	;*    of memory installed. Instead of dicking around with 
              	;*    on-board jumpers, KRISYS will simply check what banks
              	;*    are available on startup. Memory will be dynamically
              	;*    allocated as needed by the client process.
              	;*
              	;*    Memory can be assigned to specific owners in the code.
              	;*    Valid owner IDs range from 1 to 254. Owner 0 is reserved
              	;*    for unallocatable banks.
              	;*
              	;********************************************************************
              	
              	; ----------------------------
              	; ********  Functions ********
              	; ----------------------------
              	
              	.area	_TEXT
              		
              	; Initalize the memory map
              	; Each bank of the ZMM will be probed, and writable
              	; banks will be recorded on the allocated bank map
              	;
              	; Returns nothing
              	; Uses: AF, BC, DE, HL
0103:         	mem_map_init:
              		; Go to virtual mode
0103: CDCF01  		call	zmm_set_virt
              		
              		; Reset free bank counter
0106: 3E00    		ld	a,0
0108: 326505  		ld	(banks_free),a
              		
              		; Write tags to all banks
010B: 0600    		ld	b,0
010D: 78      	0$:	ld	a,b
010E: CD3902  		call	zmm_bnk3_set
0111: 3200C0  		ld	(zmm_top),a
0114: ED44    		neg
0116: 3201C0  		ld	(zmm_top+1),a
0119: 04      		inc	b
011A: F20D01  		jp	p,0$
              		
              		; Mark any banks that record correctly
011D: 0600    		ld	b,0
011F: 216605  		ld	hl,alloc_bank_map
0122: AF      	1$:	xor	a
0123: 77      		ld	(hl),a
0124: 78      		ld	a,b
0125: CD3902  		call	zmm_bnk3_set
0128: 3A00C0  		ld	a,(zmm_top)
012B: B8      		cp	b
012C: C24401  		jp	nz,2$
012F: 3A01C0  		ld	a,(zmm_top+1)
0132: 4F      		ld	c,a
0133: 78      		ld	a,b
0134: ED44    		neg
0136: B9      		cp	c
0137: C24401  		jp	nz,2$
              	
              		; Mark it
013A: 3EFF    		ld	a,0xFF
013C: 77      		ld	(hl),a
013D: 3A6505  		ld	a,(banks_free)
0140: 3C      		inc	a
0141: 326505  		ld	(banks_free),a
              		
              		; Next
0144: 23      	2$:	inc	hl
0145: 04      		inc	b
0146: F22201  		jp	p,1$
              		
              		; Disable virtual mode
0149: CDDA01  		call	zmm_set_real
              		
              		; Print out result
014C: 3A6505  		ld	a,(banks_free)
014F: CD5804  		call	tohex
0152: ED53AD04		ld	(str_mem_init_cnt),de
0156: 118804  		ld	de,str_mem_init
0159: CD4004  		call	cpm_print
              		
              		; Do we actually have an acceptable amount of memory?
015C: 3A6505  		ld	a,(banks_free)
015F: 3D      		dec	a
0160: 3D      		dec	a
0161: FAA301  		jp	m,mem_empty
              		
              		; We do, return
0164: C9      		ret
              		
              	; Allocates a bank of memory
              	; Will produce an error if no banks are available,
              	; check (banks_free) to avoid
              	; D = Owner ID (1-254)
              	;
              	; Returns A = Bank #
              	; Uses: AF, BC, HL
0165:         	mem_alloc:
              		; Check and decrement free memory
0165: 3A6505  		ld	a,(banks_free)
0168: 3D      		dec	a
0169: 326505  		ld	(banks_free),a
016C: FAA301  		jp	m,mem_empty
              		
              		; Look for the first free bank
016F: 216605  		ld	hl,alloc_bank_map
0172: 018000  		ld	bc,0x0080
0175: 3EFF    		ld	a,0xFF
0177: EDB1    		cpir
              		
              		; Make sure we found something
0179: C2A301  		jp	nz,mem_empty
              		
              		; Save and exit
017C: 2B      		dec	hl
017D: 72      		ld	(hl),d
017E: 016605  		ld	bc,alloc_bank_map
0181: B7      		or	a
0182: ED42    		sbc	hl,bc
0184: 6F      		ld	l,a
0185: C9      		ret
              		
              	; Frees a bank of memory
              	; Safe to use on banks that are not free / not owned
              	; A = Bank #
              	; D = Owner ID (1-254)
              	;
              	; Returns nothing
              	; Uses: AF, BC, HL
0186:         	mem_free:
              		; Find location in memory
0186: 0600    		ld	b,0
0188: 4F      		ld	c,a
0189: 216605  		ld	hl,alloc_bank_map
018C: 09      		add	hl,bc
              		
              		; Check owner
018D: 7E      		ld	a,(hl)
018E: BA      		cp	d
018F: C0      		ret	nz
              		
              		; Free bank
0190: 3EFF    		ld	a,0xFF
0192: 77      		ld	(hl),a
              		
              		; Increment banks free
0193: 216505  		ld	hl,banks_free
0196: 34      		inc	(hl)
0197: C9      		ret
              		
              	; Free all banks by owner
              	; D = Owner ID (1-254)
              	;
              	; Returns nothing
              	; Uses: AF, BC, HL
0198:         	mem_free_all:
              		; Free a bank
0198: AF      		xor	a
0199: F5      	0$:	push	af
019A: CD8601  		call	mem_free
019D: F1      		pop	af
              		
              		; Next bank
019E: 3C      		inc	a
019F: F29901  		jp	p,0$
01A2: C9      		ret
              		
              	; Error out if empty
              	;
              	; Does not return
              	; Uses: N/A
01A3:         	mem_empty:
01A3: 11B304  		ld	de,str_mem_empty
01A6: CD4004  		call	cpm_print
01A9: C35304  		jp	cpm_exit
              	
              	; -------------------------
              	; ******** Strings ********
              	; -------------------------
              	
              	.area	_DATA
              	
              	; Inital string that prints when the program is started
0488:         	str_mem_init:
0488: 494E4954		defb	'INITIALIZED MEMORY MAP',0x0A,0x0D
048C: 49414C49	
0490: 5A454420	
0494: 4D454D4F	
0498: 5259204D	
049C: 41500A0D	
04A0: 42414E4B		defb	'BANK COUNT = '
04A4: 20434F55	
04A8: 4E54203D	
04AC: 20      	
04AD:         	str_mem_init_cnt:
04AD: 5858480A		defb	'XXH',0x0A,0x0D,'$'
04B1: 0D24    	
              		
04B3:         	str_mem_empty:
04B3: 494E5355		defb	'INSUFFICIENT MEMORY',0x0A,0x0D,'$'
04B7: 46464943	
04BB: 49454E54	
04BF: 204D454D	
04C3: 4F52590A	
04C7: 0D24    	
              	
              	; ---------------------------
              	; ******** Variables ********
              	; ---------------------------
              	
              	.area	_BSS
              	
              	; Free bank count
0565:         	banks_free:
0565: 00      		defs	1
              	
              	; Allocated bank map
              	; This 128 byte table keeps track of every single 16K bank
              	; that exists on the ZMM. Populated on startup
0566:         	alloc_bank_map:
0566: 00000000		defs	128
056A: 00...   	
              	#include "ZMM.asm"
              	;
              	;********************************************************************
              	;*
              	;*                  Z M M   M A N A G E M E N T
              	;* 
              	;*    These routines are used to manage the state of the ZMM.
              	;*    This includes the setting of the registers as well as setting
              	;*    up trap and interrupt stuff.
              	;*
              	;********************************************************************
              	
              	; ----------------------------
              	; ********  Functions ********
              	; ----------------------------
              	
              	.area	_TEXT
              	
              	; Initalize ZMM and reset registers
              	;
              	; Returns nothing
              	; Uses: AF
01AC:         	zmm_init:
              		; Zero out control register
01AC: 3E00    		ld	a,0
01AE: 32E605  		ld	(zmm_ctrl_state),a
01B1: 32E705  		ld	(zmm_bnk0_state),a
01B4: 32E805  		ld	(zmm_bnk1_state),a
01B7: 32E905  		ld	(zmm_bnk2_state),a
01BA: 32EA05  		ld	(zmm_bnk3_state),a
              		
              		; See if we can swing in and out of virtual mode
01BD: CDCF01  		call	zmm_set_virt
01C0: CDDA01  		call	zmm_set_real
              		
              		; Tell the user that the ZMM is read
01C3: 11C904  		ld	de,str_zmm_init
01C6: C34004  		jp	cpm_print
              		
              	; Set the ZMM control register to the recorded state
              	; (zmm_ctrl_state) = New value of ZMM control register
              	;
              	; Returns nothing
              	; Uses: AF
01C9:         	zmm_ctrl_set:
01C9: 3AE605  		ld	a,(zmm_ctrl_state)
01CC: D334    		out	(zmm_ctrl),a
01CE: C9      		ret
              		
              	; Go to virtual mode
              	;
              	; Returns nothing
              	; Uses: AF
01CF:         	zmm_set_virt:
01CF: 3AE605  		ld	a,(zmm_ctrl_state)
01D2: F601    		or	0b00000001
01D4: 32E605  		ld	(zmm_ctrl_state),a
01D7: D334    		out	(zmm_ctrl),a
01D9: C9      		ret
              		
              	; Go to real mode
              	;
              	; Returns nothing
              	; Uses: AF
01DA:         	zmm_set_real:
01DA: 3AE605  		ld	a,(zmm_ctrl_state)
01DD: E6FE    		and	0b11111110
01DF: 32E605  		ld	(zmm_ctrl_state),a
01E2: D334    		out	(zmm_ctrl),a
01E4: C9      		ret
              		
              	; Set program direction to "IN"
              	;
              	; Returns nothing
              	; Uses: AF
01E5:         	zmm_prgm_in:
01E5: 3AE605  		ld	a,(zmm_ctrl_state)
01E8: F602    		or	0b00000010
01EA: 32E605  		ld	(zmm_ctrl_state),a
01ED: D334    		out	(zmm_ctrl),a
01EF: C9      		ret
              		
              	; Set program direction to "OUT"
              	;
              	; Returns nothing
              	; Uses: AF
01F0:         	zmm_prgm_out:
01F0: 3AE605  		ld	a,(zmm_ctrl_state)
01F3: E6FD    		and	0b11111101
01F5: 32E605  		ld	(zmm_ctrl_state),a
01F8: D334    		out	(zmm_ctrl),a
01FA: C9      		ret
              		
              	; Turn on irq intercept mode
              	;
              	; Returns nothing
              	; Uses: AF
01FB:         	zmm_irq_inter:
01FB: 3AE605  		ld	a,(zmm_ctrl_state)
01FE: F604    		or	0b00000100
0200: 32E605  		ld	(zmm_ctrl_state),a
0203: D334    		out	(zmm_ctrl),a
0205: C9      		ret
              		
              	; Turn off irq intercept mode
              	;
              	; Returns nothing
              	; Uses: AF
0206:         	zmm_irq_normal:
0206: 3AE605  		ld	a,(zmm_ctrl_state)
0209: E6FB    		and	0b11111011
020B: 32E605  		ld	(zmm_ctrl_state),a
020E: D334    		out	(zmm_ctrl),a
0210: C9      		ret
              	
              	; Turn on force virtual irq
              	;
              	; Returns nothing
              	; Uses: AF
0211:         	zmm_irq_on:
0211: 3AE605  		ld	a,(zmm_ctrl_state)
0214: F608    		or	0b00001000
0216: 32E605  		ld	(zmm_ctrl_state),a
0219: D334    		out	(zmm_ctrl),a
021B: C9      		ret
              		
              	; Turn off force virtual irq
              	;
              	; Returns nothing
              	; Uses: AF
021C:         	zmm_irq_off:
021C: 3AE605  		ld	a,(zmm_ctrl_state)
021F: E6F7    		and	0b11110111
0221: 32E605  		ld	(zmm_ctrl_state),a
0224: D334    		out	(zmm_ctrl),a
0226: C9      		ret
              		
              	; Set bank 0
              	; A = Bank to set
              	;
              	; Returns nothing
              	; Uses: AF, B
0227:         	zmm_bnk0_set:
0227: 32E705  		ld	(zmm_bnk0_state),a
022A: D330    		out	(zmm_bnk0),a
022C: C9      		ret
              		
              	; Set bank 1
              	; A = Bank to set
              	;
              	; Returns nothing
              	; Uses:  AF, B
022D:         	zmm_bnk1_set:
022D: 32E805  		ld	(zmm_bnk1_state),a
0230: D331    		out	(zmm_bnk1),a
0232: C9      		ret
              		
              	; Set bank 2
              	; A = Bank to set
              	;
              	; Returns nothing
              	; Uses:  AF, B
0233:         	zmm_bnk2_set:
0233: 32E905  		ld	(zmm_bnk2_state),a
0236: D332    		out	(zmm_bnk2),a
0238: C9      		ret
              		
              	; Set bank 3
              	; A = Bank to set
              	;
              	; Returns nothing
              	; Uses:  AF, B
0239:         	zmm_bnk3_set:
0239: 32EA05  		ld	(zmm_bnk3_state),a
023C: D333    		out	(zmm_bnk3),a
023E: C9      		ret
              		
              	; -------------------------
              	; ******** Strings ********
              	; -------------------------
              	
              	.area	_DATA
              	
              	; Inital string that prints when the program is started
04C9:         	str_zmm_init:
04C9: 494E4954		defb	'INITIALIZED ZMM',0x0A,0x0D,'$'
04CD: 49414C49	
04D1: 5A454420	
04D5: 5A4D4D0A	
04D9: 0D24    	
              		
              	; ---------------------------
              	; ******** Variables ********
              	; ---------------------------
              	
              	.area	_BSS
              	
              	; Reflected state of control register
05E6:         	zmm_ctrl_state:
05E6: 00      		defs	1
              		
              	; Bank 0 state
05E7:         	zmm_bnk0_state:
05E7: 00      		defs	1
              		
              	; Bank 1 state
05E8:         	zmm_bnk1_state:
05E8: 00      		defs	1
              		
              	; Bank 2 state
05E9:         	zmm_bnk2_state:
05E9: 00      		defs	1
              		
              	; Bank 3 state
05EA:         	zmm_bnk3_state:
05EA: 00      		defs	1
              		
              	#include "RESOURCE.asm"
              	;
              	;********************************************************************
              	;*
              	;*               R E S O U R C E   M A N A G E M E N T
              	;* 
              	;*    These routines handle obtaining use-supplied resources
              	;*    such as configurations, ROM images, and storage bindings.
              	;*    During startup, these resources will be loaded to build
              	;*    the virtual machine.
              	;*
              	;********************************************************************
              	
              	; -------------------------
              	; ******** Equates ********
              	; -------------------------
              	
0010:         	arg_size	equ 16
              	
              	; ----------------------------
              	; ********  Functions ********
              	; ----------------------------
              	
              	.area	_TEXT
              	
              	; Initalize resources
              	;
              	; Returns nothing
              	; Uses: AF, BC, HL
023F:         	res_init:
              		; Start by zero-terminating string
023F: 218000  		ld	hl,cpm_command
0242: 4E      		ld	c,(hl)
0243: 0600    		ld	b,0
0245: 09      		add	hl,bc
0246: 23      		inc	hl
0247: 70      		ld	(hl),b
              		
0248: C9      		ret
              		
              	; Loads an open resource into a bankmap
              	; Bankmap will be zero-padded to fill requested number of records
              	; HL = Address of bankmap
              	; BC = Number of records (128 byte blocks) to load
              	;
              	; Returns nothing
              	; Uses: all
0249:         	res_load:
              	
              		; Set read flag
0249: 3EFF    		ld	a,0xFF
024B: 328F06  		ld	(res_do_read),a
              	
              		; Save args
024E: 229006  		ld	(res_bankmap),hl
0251: ED438D06		ld	(res_sectors),bc
              	
              		; Virtual mode should be off while we do this
0255: 3AE605  		ld	a,(zmm_ctrl_state)
0258: F5      		push	af
0259: CDDA01  		call	zmm_set_real
              		
              		; Do function call
025C: CD6B02  		call	0$
              		
              		; Reset bank 3
025F: 3AEA05  		ld	a,(zmm_bnk3_state)
0262: D333    		out	(zmm_bnk3),a
              		
              		; Restore register
0264: F1      		pop	af
0265: 32E605  		ld	(zmm_ctrl_state),a
0268: C3C901  		jp	zmm_ctrl_set
              		
              		; Allocate a new bank
026B: CD6501  	0$:	call	mem_alloc
026E: 2A9006  		ld	hl,(res_bankmap)
0271: 77      		ld	(hl),a
0272: 23      		inc	hl
0273: 229006  		ld	(res_bankmap),hl
              		
              		; Set the bank in slot 3
0276: D333    		out	(zmm_bnk3),a
              		
              		; Set DMA address
0278: 110D06  		ld	de,res_buffer
027B: 0E1A    		ld	c,bios_set_dma
027D: CD0500  		call	bdos
              		
              		; Set pointer	ld	hl,zmm_top
0280: 229206  		ld	(res_pointer),hl
              		
              		; We will be loading up to 128 records at a time here
0283: 0680    		ld	b,128
              		
              		; Do read operation
0285: C5      	1$:	push	bc
0286: 119406  		ld	de,res_fcb
0289: 0E14    		ld	c,bdos_read
028B: 3A8F06  		ld	a,(res_do_read)
028E: B7      		or	a
028F: C40500  		call	nz,bdos
              		
              		; Check file I/O result
0292: B7      		or	a
0293: C4BC02  		call	nz,50$
              		
              		; Go to virtual mode
0296: CDCF01  		call	zmm_set_virt
              		
              		; Copy record to bank
0299: 210D06  		ld	hl,res_buffer
029C: ED5B9206		ld	de,(res_pointer)
02A0: 018000  		ld	bc,128
02A3: EDB0    		ldir
02A5: ED539206		ld	(res_pointer),de
              		
              		; Back to real mode
02A9: CDDA01  		call	zmm_set_real 
              		
              		; Get BC back to restore sector counter
02AC: C1      		pop	bc
              		
              		; Decrement record count
02AD: 2A8D06  		ld	hl,(res_sectors)
02B0: 2B      		dec	hl
02B1: 228D06  		ld	(res_sectors),hl
02B4: 7C      		ld	a,h
02B5: B5      		or	l
02B6: C8      		ret	z
              		
              		; Go get another sector
02B7: 10CC    		djnz	1$
02B9: C36B02  		jp	0$
              	
              		; Zero buffer and reset read flag
02BC: AF      	50$:	xor	a
02BD: 328F06  		ld	(res_do_read),a
              		
02C0: 210D06  		ld	hl,res_buffer
02C3: 110E06  		ld	de,res_buffer+1
02C6: 017F00  		ld	bc,128-1
02C9: 77      		ld	(hl),a
02CA: EDB0    		ldir
              	
02CC: C9      		ret
              		
              	; Opens a file based on the resource argument
              	; If the file cannot be opened, an error will be thrown
              	; (res_argument) = File to open
              	;
              	; Returns nothing
              	; Uses: all
02CD:         	res_open:
              	
              		; Virtual mode should be off while we do this
02CD: 3AE605  		ld	a,(zmm_ctrl_state)
02D0: F5      		push	af
02D1: CDDA01  		call	zmm_set_real
              		
              		; Do function call
02D4: CDDE02  		call	0$
              		
              		; Restore register
02D7: F1      		pop	af
02D8: 32E605  		ld	(zmm_ctrl_state),a
02DB: C3C901  		jp	zmm_ctrl_set
              		
              		; Let the user know we are loading stuff
02DE: 0E09    	0$:	ld	c,bdos_print
02E0: 11DB04  		ld	de,str_load_a
02E3: CD0500  		call	bdos
              		
              		; Print resource name
02E6: 21FC05  		ld	hl,res_current
02E9: 5E      		ld	e,(hl)
02EA: 23      		inc	hl
02EB: 56      		ld	d,(hl)
02EC: CDB203  		call	res_printzt
              		
              		; Next string
02EF: 0E09    		ld	c,bdos_print
02F1: 11E404  		ld	de,str_load_b
02F4: CD0500  		call	bdos
              		
              		; Print file name
02F7: 11EB05  		ld	de,res_argument
02FA: CDB203  		call	res_printzt
              		
              		; CRLF
02FD: 0E09    		ld	c,bdos_print
02FF: 115E05  		ld	de,str_crlf
0302: CD0500  		call	bdos
              		
              		; Detect if there is an argument
0305: 3AEB05  		ld	a,(res_argument)
0308: B7      		or	a
0309: C21703  		jp	nz,1$
              		
              		; No argument, error!
030C: 0E09    		ld	c,bdos_print
030E: 11EB04  		ld	de,str_arg_empty
0311: CD0500  		call	bdos
0314: C35304  		jp	cpm_exit
              	
              		; Reset fields
0317: AF      	1$:	xor	a
0318: 219406  		ld	hl,res_fcb
031B: 119506  		ld	de,res_fcb+1
031E: 012300  		ld	bc ,36-1
0321: 77      		ld	(hl),a
0322: EDB0    		ldir
              		
0324: 3E20    		ld	a,0x20
0326: 219506  		ld	hl,res_fcb_name
0329: 119606  		ld	de,res_fcb_name+1
032C: 010A00  		ld	bc ,11-1
032F: 77      		ld	(hl),a
0330: EDB0    		ldir
              	
              		; Is there a prefix?
0332: 21EB05  		ld	hl,res_argument
0335: 3AEC05  		ld	a,(res_argument+1)
0338: FE3A    		cp	':'
033A: C24C03  		jp	nz,2$
              		
              		; Set prefix
033D: 3AEB05  		ld	a,(res_argument)
0340: D640    		sub	'A'-1
0342: FE11    		cp	17
0344: D2A703  		jp	nc,99$
0347: 329406  		ld	(res_fcb_drive),a
034A: 23      		inc	hl
034B: 23      		inc	hl
              	
              		; HL = Proper filename start
034C: 0608    	2$:	ld	b,8
034E: 119506  		ld	de,res_fcb_name
              		
              		; Copy it over
0351: 7E      	3$:	ld	a,(hl)
0352: B7      		or	a
0353: CAA703  		jp	z,99$
0356: FE2A    		cp	'*'
0358: CA6803  		jp	z,4$
035B: FE2E    		cp	'.'
035D: CA6F03  		jp	z,5$
0360: 12      		ld	(de),a
0361: 13      		inc	de
0362: 23      		inc	hl
0363: 10EC    		djnz	3$
0365: C36F03  		jp	5$
              	
              		; Fill remains of FCB file name
0368: 3E3F    	4$:	ld	a,'?'
036A: 12      		ld	(de),a
036B: 13      		inc	de
036C: 10FA    		djnz	4$
036E: 23      		inc	hl
              	
              		; We should either see a '.' or a null character
036F: 7E      	5$:	ld	a,(hl)
0370: B7      		or	a
0371: CA9803  		jp	z,8$
0374: FE2E    		cp	'.'
0376: C2A703  		jp	nz,99$
0379: 23      		inc	hl
              		
              		; Fill in extension
037A: 0603    		ld	b,3
037C: 119D06  		ld	de,res_fcb_type
              		
              		; Copy it over
037F: 7E      	6$:	ld	a,(hl)
0380: B7      		or	a
0381: CA9803  		jp	z,8$
0384: FE2A    		cp	'*'
0386: CA9103  		jp	z,7$
0389: 12      		ld	(de),a
038A: 13      		inc	de
038B: 23      		inc	hl
038C: 10F1    		djnz	6$
038E: C39803  		jp	8$
              		
              		; Fill remains of FCB file extension
0391: 3E3F    	7$:	ld	a,'?'
0393: 12      		ld	(de),a
0394: 13      		inc	de
0395: 10D1    		djnz	4$
0397: 23      		inc	hl
              	
              		; We should get a zero
0398: 7E      	8$:	ld 	a,(hl)
0399: B7      		or	a
039A: C2A703  		jp	nz,99$
              		
              		; It is filled in, attempt to open
039D: 0E0F    		ld	c,bdos_open
039F: 119406  		ld	de,res_fcb
03A2: CD0500  		call	bdos
              		
              		; Check error
03A5: 3C      		inc	a
03A6: C0      		ret	nz
              		
              		; Error!
03A7: 0E09    	99$:	ld	c,bdos_print
03A9: 110205  		ld	de,str_arg_fail
03AC: CD0500  		call	bdos
03AF: C35304  		jp	cpm_exit
              		
              		
              	; Print a zero terminated string
              	; We should be in real mode for this
              	; DE = String
              	;
              	; Returns nothing
              	; Uses: All
03B2:         	res_printzt:
03B2: 1A      	0$:	ld	a,(de)
03B3: B7      		or	a
03B4: C8      		ret	z
              		
              		; Print character
03B5: D5      		push	de
03B6: 5F      		ld	e,a
03B7: 0E02    		ld	c,bdos_con_out
03B9: CD0500  		call	bdos
03BC: D1      		pop	de
03BD: 13      		inc	de
03BE: C3B203  		jp	0$
              	
              	; Find a resource from the command line
              	; If the resource is found, the contents will be cached in memory
              	; DE = Name of resource (upper case only) 
              	;
              	; Returns A = 0xFF if no resource is found
              	; Uses: AF, BC, DE, HL
03C1:         	res_locate:
              		; Save resource
03C1: ED53FC05		ld	(res_current),de
              	
              		; Travel to the start of arguments
03C5: 218100  		ld	hl,cpm_command+1
03C8: 7E      	0$:	ld	a,(hl)
03C9: B7      		or	a
03CA: CA2704  		jp	z,99$
03CD: FE21    		cp	0x21
03CF: D2D603  		jp	nc,1$
03D2: 23      		inc	hl
03D3: C3C803  		jp	0$
              		
              		; Found an argument
              		; Check it against the contents of (DE)
              		; Also must start with '-'
03D6: FE2D    	1$:	cp	'-'
03D8: C2E903  		jp	nz,3$
03DB: 23      		inc	hl
03DC: D5      		push	de
03DD: 1A      	2$:	ld	a,(de)
              		
              		; Check if at end of string
03DE: B7      		or	a
03DF: CAF703  		jp	z,4$
              		
              		; No? Well lets see if (de) = (hl)
03E2: BE      		cp	(hl)
03E3: 23      		inc	hl
03E4: 13      		inc	de
03E5: CADD03  		jp	z,2$
              		
              		; Strings are different!
              		; Escape from the current argument and continue
03E8: D1      		pop	de
03E9: 7E      	3$:	ld	a,(hl)
03EA: B7      		or	a
03EB: CA2704  		jp	z,99$
03EE: FE21    		cp	0x21
03F0: DAC803  		jp	c,0$
03F3: 23      		inc	hl
03F4: C3E903  		jp	3$
              	
              		; Make sure we are at the end of the argument as well
03F7: D1      	4$: 	pop	de
03F8: 7E      		ld	a,(hl)
03F9: FE21    		cp	0x21
03FB: D2E903  		jp	nc,3$
              		
              		; Ok, lets copy the argument into memory if it exists
03FE: 11EB05  		ld	de,res_argument
0401: AF      		xor	a
0402: 12      		ld	(de),a
              		
              		; Travel to the start of the argument
0403: 7E      	5$:	ld	a,(hl)
0404: B7      		or	a
0405: CA2504  		jp	z,89$
0408: FE21    		cp	0x21
040A: D21104  		jp	nc,6$
040D: 23      		inc	hl
040E: C30304  		jp	5$
              	
              		; Make sure it doesn't start with '-'
0411: FE2D    	6$:	cp	'-'
0413: CA2504  		jp	z,89$
              		
              		; Ok, lets copy up 16 bytes of this
0416: 0610    		ld	b,arg_size
0418: 7E      	7$:	ld	a,(hl)
0419: FE21    		cp	0x21
041B: DA2304  		jp	c,8$
041E: 12      		ld	(de),a
041F: 23      		inc	hl
0420: 13      		inc	de
0421: 10F5    		djnz	7$
              	
              		; Zero terminate
0423: AF      	8$:	xor	a
0424: 12      		ld	(de),a
              		
              		; Good ending
0425: AF      	89$:	xor	a
0426: C9      		ret
              	
              		; Bad ending
0427: 3EFF    	99$:	ld	a,0xFF
0429: C9      		ret
              		
              	; -------------------------
              	; ******** Strings ********
              	; -------------------------
              	
              	.area	_DATA
              	
              	; Loading string components
04DB:         	str_load_a:
04DB: 4C4F4144		defb	'LOADING $'
04DF: 494E4720	
04E3: 24      	
              		
04E4:         	str_load_b:
04E4: 2046524F		defb	' FROM $'
04E8: 4D2024  	
              		
              	; Error messages
04EB:         	str_arg_empty:
04EB: 4E4F2041		defb	'NO ARGUMENT PROVIDED',0x0A,0x0D,'$'
04EF: 5247554D	
04F3: 454E5420	
04F7: 50524F56	
04FB: 49444544	
04FF: 0A0D24  	
              		
0502:         	str_arg_fail:
0502: 4641494C		defb	'FAILED TO OPEN FILE',0x0A,0x0D,'$'
0506: 45442054	
050A: 4F204F50	
050E: 454E2046	
0512: 494C450A	
0516: 0D24    	
              		
              	; ---------------------------
              	; ******** Variables ********
              	; ---------------------------
              	
              	.area	_BSS
              	
              	; Stores a zero-terminated string for the resource argument
05EB:         	res_argument:
05EB: 00000000		defs	arg_size+1
05EF: 00...   	
              		
              	; Current resource being accessed
05FC:         	res_current:
05FC: 00000000		defs	arg_size+1
0600: 00...   	
              		
              	; Resource buffer
060D:         	res_buffer:
060D: 00000000		defs	128
0611: 00...   	
              		
              	; Sector counter
068D:         	res_sectors:
068D: 0000    		defs	2
              		
              	; Do we need to read?
068F:         	res_do_read:
068F: 00      		defs	1
              		
              	; Resource bankmap
0690:         	res_bankmap:
0690: 0000    		defs	2
              		
              	; Loading pointer
0692:         	res_pointer:
0692: 0000    		defs	2
              		
              	; File control block for use in loading resources
0694:         	res_fcb:
0694: 00000000		defs	36
0698: 00...   	
0694:         	res_fcb_drive	equ	res_fcb
0695:         	res_fcb_name	equ	res_fcb+1
069D:         	res_fcb_type	equ	res_fcb+9
06A0:         	res_fcb_ex	equ	res_fcb+12
06A1:         	res_fcb_s1	equ	res_fcb+13
06A2:         	res_fcb_s2	equ	res_fcb+14
06A3:         	res_fcb_rc	equ	res_fcb+15
06A4:         	res_fcb_data	equ	res_fcb+16
06B4:         	res_fcb_cr	equ	res_fcb+32
06B5:         	res_fcb_r0	equ	res_fcb+33
06B6:         	res_fcb_r1	equ	res_fcb+34
06B7:         	res_fcb_r2	equ	res_fcb+35
              	
              	; --------------------------------
              	; ******** KRISYS Startup ********
              	; --------------------------------
              	
              	.area	_TEXT
              		
              		; KRISYS entry point
042A:         	kri_start:	
              		; Set up stack
042A: F3      		di
042B: 310070  		ld	sp,zmm_capture
042E: 215304  		ld	hl,cpm_exit
0431: E5      		push	hl
              		
              		; Print "hello" splash
0432: 0E09    		ld	c,bdos_print
0434: 111805  		ld	de,str_splash
0437: CD0500  		call	bdos
              		
              		; Initalize subcomponents
              		;call	zmm_init
              		;call	mem_map_init
043A: CD3F02  		call	res_init
              		
              		
              		; Start the core
043D: C36F04  		jp	core_start
              		
              	; ------------------------------
              	; ******** CP/M Service ********
              	; ------------------------------
              		
              	; Print something to the CP/M console
              	; DE = Address of string to print
              	;
              	; Returns nothing
              	; Uses: All
0440:         	cpm_print:
              		; Save control register state
0440: 3AE605  		ld	a,(zmm_ctrl_state)
0443: F5      		push	af
              		
              		; Go to real mode
0444: CDDA01  		call zmm_set_real
              		
              		; Do BDOS call
0447: 0E09    		ld	c,bdos_print
0449: CD0500  		call	bdos
              		
              		; Restore register
044C: F1      		pop	af
044D: 32E605  		ld	(zmm_ctrl_state),a
0450: C3C901  		jp	zmm_ctrl_set
              		
              	; Go back to CP/M
              	;
              	; Does not return
              	; Uses: N/A
0453:         	cpm_exit:
0453: 0E00    		ld	c,bdos_exit
0455: CD0500  		call	bdos	
              		
              	; ----------------------
              	; ******** Misc ********
              	; ----------------------
              		
              	; Converts the value into an 8 bit hex number
              	; A = Number to convert
              	;
              	; Returns DE = result
              	; Uses: AF, DE
0458: 57      	tohex:	ld	d,a
0459: CD6304  		call	0$
045C: 5F      		ld	e,a
045D: 7A      		ld	a,d
045E: CD6704  		call	1$
0461: 57      		ld	d,a
0462: C9      		ret
              		
0463: 1F      	0$:	rra
0464: 1F      		rra
0465: 1F      		rra
0466: 1F      		rra
0467: F6F0    	1$:	or	0xF0
0469: 27      		daa
046A: C6A0    		add	a,0xA0
046C: CE40    		adc	a,0x40
046E: C9      		ret
              	
              	; -------------------------
              	; ******** Strings ********
              	; -------------------------
              	
              	.area	_DATA
              	
              	; Inital string that prints when the program is started
0518:         	str_splash:
0518: 4944454E		defb	'IDENTITY KRISYS HYPERVISOR, CP/M EDT.',0x0A,0x0D
051C: 54495459	
0520: 204B5249	
0524: 53595320	
0528: 48595045	
052C: 52564953	
0530: 4F522C20	
0534: 43502F4D	
0538: 20454454	
053C: 2E0A0D  	
053F: 5645522E		defb	'VER. 0.0.1, GAVIN TERSTEEG 2024'
0543: 20302E30	
0547: 2E312C20	
054B: 47415649	
054F: 4E205445	
0553: 52535445	
0557: 45472032	
055B: 303234  	
              		
              	; Carriage return, line break
055E:         	str_crlf:
055E: 0A0D24  		defb	0x0A,0x0D,'$' 
              		
              	
              	; ---------------------------
              	; ******** Core Init ********
              	; ---------------------------
              	
              	.area	_TEXT
              	
              	; Start of SG-1000 core
046F:         	core_start:
              	
              		; Try to find rom resource
046F: 116105  		ld	de,str_rom
0472: CDC103  		call	res_locate
0475: B7      		or	a
0476: C25304  		jp	nz,cpm_exit
              		
              		; Open the resource
0479: CDCD02  		call	res_open
              		
              		; Load resources into bankmap
047C: 21B806  		ld	hl,bm_rom
047F: 010001  		ld	bc,256
0482: CD4902  		call	res_load
              	
0485: C35304  		jp	cpm_exit
              		
              	; -------------------------
              	; ******** Strings ********
              	; -------------------------
              	
              	.area	_DATA
              	
              	; Resource strings
0561:         	str_rom:
0561: 524F4D00		defb	'ROM',0
              		
              		
              	; ---------------------------
              	; ******** Variables ********
              	; ---------------------------
              	
              	.area	_BSS
              	
              	; Reflected state of control register
06B8:         	bm_rom:
06B8: 0000    		defs	2


; +++ segments +++

#CODE _TEXT    = $0100 =   256,  size = $0388 =   904
#CODE _DATA    = $0488 =  1160,  size = $00DD =   221
#DATA _BSS     = $0565 =  1381,  size = $0155 =   341

; +++ global symbols +++

_BSS             = $0565 =  1381  _BSS    KRISYS.asm:28 (unused)
_BSS_end         = $06BA =  1722  _BSS    KRISYS.asm:28
_BSS_size        = $0155 =   341  _BSS    KRISYS.asm:28 (unused)
_DATA            = $0488 =  1160  _DATA   KRISYS.asm:27 (unused)
_DATA_end        = $0565 =  1381  _DATA   KRISYS.asm:27
_DATA_size       = $00DD =   221  _DATA   KRISYS.asm:27 (unused)
_TEXT            = $0100 =   256  _TEXT   KRISYS.asm:26 (unused)
_TEXT_end        = $0488 =  1160  _TEXT   KRISYS.asm:26
_TEXT_size       = $0388 =   904  _TEXT   KRISYS.asm:26 (unused)
alloc_bank_map   = $0566 =  1382  _BSS    MEMORY.asm:211
arg_size         = $0010 =    16  _BSS    RESOURCE.asm:17
banks_free       = $0565 =  1381  _BSS    MEMORY.asm:205
bdos             = $0005 =     5  _TEXT   KRISYS.asm:49
bdos_con_in      = $0001 =     1  _TEXT   KRISYS.asm:51 (unused)
bdos_con_out     = $0002 =     2  _TEXT   KRISYS.asm:52
bdos_exit        = $0000 =     0  _TEXT   KRISYS.asm:50
bdos_open        = $000F =    15  _TEXT   KRISYS.asm:54
bdos_print       = $0009 =     9  _TEXT   KRISYS.asm:53
bdos_read        = $0014 =    20  _TEXT   KRISYS.asm:55
bios_set_dma     = $001A =    26  _TEXT   KRISYS.asm:56
bm_rom           = $06B8 =  1720  _BSS    KSG1000.asm:53
core_start       = $046F =  1135  _TEXT   KSG1000.asm:17
cpm_command      = $0080 =   128  _TEXT   KRISYS.asm:58
cpm_exit         = $0453 =  1107  _TEXT   KRISYS.asm:153
cpm_print        = $0440 =  1088  _TEXT   KRISYS.asm:132
kri_start        = $042A =  1066  _TEXT   KRISYS.asm:102
mem_alloc        = $0165 =   357  _TEXT   MEMORY.asm:103
mem_empty        = $01A3 =   419  _TEXT   MEMORY.asm:177
mem_free         = $0186 =   390  _TEXT   MEMORY.asm:135
mem_free_all     = $0198 =   408  _TEXT   MEMORY.asm:161 (unused)
mem_map_init     = $0103 =   259  _TEXT   MEMORY.asm:30 (unused)
nabu_at_latch    = $0041 =    65  _TEXT   KRISYS.asm:85 (unused)
nabu_ay_data     = $0040 =    64  _TEXT   KRISYS.asm:84 (unused)
nabu_nctl        = $0000 =     0  _TEXT   KRISYS.asm:83 (unused)
nmi_address      = $0066 =   102  _TEXT   KRISYS.asm:79
nmi_vector       = $0067 =   103  _TEXT   KRISYS.asm:80 (unused)
res_argument     = $05EB =  1515  _BSS    RESOURCE.asm:455
res_bankmap      = $0690 =  1680  _BSS    RESOURCE.asm:475
res_buffer       = $060D =  1549  _BSS    RESOURCE.asm:463
res_current      = $05FC =  1532  _BSS    RESOURCE.asm:459
res_do_read      = $068F =  1679  _BSS    RESOURCE.asm:471
res_fcb          = $0694 =  1684  _BSS    RESOURCE.asm:483
res_fcb_cr       = $06B4 =  1716  _BSS    RESOURCE.asm:493 (unused)
res_fcb_data     = $06A4 =  1700  _BSS    RESOURCE.asm:492 (unused)
res_fcb_drive    = $0694 =  1684  _BSS    RESOURCE.asm:485
res_fcb_ex       = $06A0 =  1696  _BSS    RESOURCE.asm:488 (unused)
res_fcb_name     = $0695 =  1685  _BSS    RESOURCE.asm:486
res_fcb_r0       = $06B5 =  1717  _BSS    RESOURCE.asm:494 (unused)
res_fcb_r1       = $06B6 =  1718  _BSS    RESOURCE.asm:495 (unused)
res_fcb_r2       = $06B7 =  1719  _BSS    RESOURCE.asm:496 (unused)
res_fcb_rc       = $06A3 =  1699  _BSS    RESOURCE.asm:491 (unused)
res_fcb_s1       = $06A1 =  1697  _BSS    RESOURCE.asm:489 (unused)
res_fcb_s2       = $06A2 =  1698  _BSS    RESOURCE.asm:490 (unused)
res_fcb_type     = $069D =  1693  _BSS    RESOURCE.asm:487
res_init         = $023F =   575  _TEXT   RESOURCE.asm:29
res_load         = $0249 =   585  _TEXT   RESOURCE.asm:47
res_locate       = $03C1 =   961  _TEXT   RESOURCE.asm:338
res_open         = $02CD =   717  _TEXT   RESOURCE.asm:153
res_pointer      = $0692 =  1682  _BSS    RESOURCE.asm:479
res_printzt      = $03B2 =   946  _TEXT   RESOURCE.asm:318
res_sectors      = $068D =  1677  _BSS    RESOURCE.asm:467
stack_size       = $0020 =    32          KRISYS.asm:31
str_arg_empty    = $04EB =  1259  _DATA   RESOURCE.asm:442
str_arg_fail     = $0502 =  1282  _DATA   RESOURCE.asm:445
str_crlf         = $055E =  1374  _DATA   KRISYS.asm:196
str_load_a       = $04DB =  1243  _DATA   RESOURCE.asm:435
str_load_b       = $04E4 =  1252  _DATA   RESOURCE.asm:438
str_mem_empty    = $04B3 =  1203  _DATA   MEMORY.asm:195
str_mem_init     = $0488 =  1160  _DATA   MEMORY.asm:189
str_mem_init_cnt = $04AD =  1197  _DATA   MEMORY.asm:192
str_rom          = $0561 =  1377  _DATA   KSG1000.asm:42
str_splash       = $0518 =  1304  _DATA   KRISYS.asm:191
str_zmm_init     = $04C9 =  1225  _DATA   ZMM.asm:184
tohex            = $0458 =  1112  _TEXT   KRISYS.asm:166
zmm_addr_hi      = $0032 =    50  _TEXT   KRISYS.asm:67 (unused)
zmm_addr_lo      = $0033 =    51  _TEXT   KRISYS.asm:68 (unused)
zmm_bnk0         = $0030 =    48  _TEXT   KRISYS.asm:61
zmm_bnk0_set     = $0227 =   551  _TEXT   ZMM.asm:142 (unused)
zmm_bnk0_state   = $05E7 =  1511  _BSS    ZMM.asm:198
zmm_bnk1         = $0031 =    49  _TEXT   KRISYS.asm:62
zmm_bnk1_set     = $022D =   557  _TEXT   ZMM.asm:152 (unused)
zmm_bnk1_state   = $05E8 =  1512  _BSS    ZMM.asm:202
zmm_bnk2         = $0032 =    50  _TEXT   KRISYS.asm:63
zmm_bnk2_set     = $0233 =   563  _TEXT   ZMM.asm:162 (unused)
zmm_bnk2_state   = $05E9 =  1513  _BSS    ZMM.asm:206
zmm_bnk3         = $0033 =    51  _TEXT   KRISYS.asm:64
zmm_bnk3_set     = $0239 =   569  _TEXT   ZMM.asm:172
zmm_bnk3_state   = $05EA =  1514  _BSS    ZMM.asm:210
zmm_capt_res     = $007F =   127  _TEXT   KRISYS.asm:76 (unused)
zmm_capt_set     = $0070 =   112  _TEXT   KRISYS.asm:75 (unused)
zmm_capture      = $7000 = 28672  _TEXT   KRISYS.asm:71
zmm_ctrl         = $0034 =    52  _TEXT   KRISYS.asm:65
zmm_ctrl_set     = $01C9 =   457  _TEXT   ZMM.asm:44
zmm_ctrl_state   = $05E6 =  1510  _BSS    ZMM.asm:194
zmm_init         = $01AC =   428  _TEXT   ZMM.asm:22 (unused)
zmm_irq_inter    = $01FB =   507  _TEXT   ZMM.asm:97 (unused)
zmm_irq_normal   = $0206 =   518  _TEXT   ZMM.asm:108 (unused)
zmm_irq_off      = $021C =   540  _TEXT   ZMM.asm:130 (unused)
zmm_irq_on       = $0211 =   529  _TEXT   ZMM.asm:119 (unused)
zmm_isr          = $0030 =    48  _TEXT   KRISYS.asm:66 (unused)
zmm_map          = $8000 = 32768  _TEXT   KRISYS.asm:72 (unused)
zmm_prgm_in      = $01E5 =   485  _TEXT   ZMM.asm:75 (unused)
zmm_prgm_out     = $01F0 =   496  _TEXT   ZMM.asm:86 (unused)
zmm_set_real     = $01DA =   474  _TEXT   ZMM.asm:64
zmm_set_virt     = $01CF =   463  _TEXT   ZMM.asm:53
zmm_top          = $C000 = 49152  _TEXT   KRISYS.asm:73
zmm_trap         = $0037 =    55  _TEXT   KRISYS.asm:69 (unused)


total time: 0.3807 sec.
no errors
