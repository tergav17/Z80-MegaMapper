              	; --------------------------------------
              	; zasm: assemble "KCOLECO.asm"
              	; date: 2024-08-14 01:27:45
              	; --------------------------------------


              	;
              	;********************************************************************
              	;*
              	;*        K R I S Y S   C O L E C O V I S I O N   C O R E
              	;*
              	;********************************************************************
              	
              	#include "KRISYS.asm"
              	;
              	;********************************************************************
              	;*
              	;*              I D E N T I T Y   K R I S Y S
              	;*
              	;*      The [K]lunkly [R]emapper / [I]nterpreter [SYS]tem
              	;*
              	;*             Written by Gavin Tersteeg, 2024
              	;*              Copyleft, All Wrongs Reserved
              	;*
              	;*
              	;*   This piece of software allows different classic Z80 systems
              	;*   to run as "virtual machines" on top of existing hardware by
              	;*   use of a ZMM (Z80 MEGAMAPPER). It does this by remapping RAM
              	;*   and I/O address space ot match that of it's target system.
              	;*   Anything that can't be emulated by simple remapping is instead
              	;*   interpreted using I/O traps. 
              	;*
              	;*   This allows virtualized machines to run with an acceptable
              	;*   degree of speed and accuracy. While the ZMM is still quite
              	;*   limited in what sort of hardware can be efficiently virtualized,
              	;*   anything that avoids MMIO or graphics hardware that isn't a VDP
              	;*   generally can be made to work.
              	;* 
              	;********************************************************************
              		
              	; ----------------------------
              	; ******** ZASM Setup ********
              	; ----------------------------
              	
0020:         	stack_size = 0x20
              	
              	#target BIN
0100:         	#code	_TEXT,0x0100	; Setup to run as a CP/M executable
033D:         	#code	_DATA,_TEXT_end
0416:         	#data	_BSS,_DATA_end
              	
              	; Make sure w don't overrun available memory
              	#assert	_BSS_end < (zmm_capture-stack_size)
              	
              	.area	_TEXT
0100: C3F502  		jp	kri_start
              	
              	; -------------------------
              	; ******** Equates ********
              	; -------------------------
              	
              	; CP/M Stuff
0005:         	bdos		equ	0x0005
0000:         	bdos_exit	equ	0x00
0001:         	bdos_con_in	equ	0x01
0002:         	bdos_con_out	equ	0x02
0009:         	bdos_print	equ	0x09
              	
0080:         	cpm_command	equ	0x0080
              	
              	; Z80 MEGAMAPPER Stuff
0030:         	zmm_bnk0	equ	0x30	; 16K Bank 0 (0x0000 - 0x3FFF)
0031:         	zmm_bnk1	equ	0x31	; 16K Bank 1 (0x4000 - 0x7FFF)
0032:         	zmm_bnk2	equ	0x32	; 16K Bank 2 (0x8000 - 0xBFFF)
0033:         	zmm_bnk3	equ	0x33	; 16K Bank 3 (0xC000 - 0xFFFF)
0034:         	zmm_ctrl	equ	0x34	; ZMM Control Register
0030:         	zmm_isr		equ	0x30	; ZMM Trapped Instruction Register
0032:         	zmm_addr_hi	equ	0x32	; ZMM Trap Address High
0033:         	zmm_addr_lo	equ	0x33	; ZMM Trap Address Low
0037:         	zmm_trap	equ	0x37 	; ZMM Trap Vector
              	
7000:         	zmm_capture	equ	0x7000
8000:         	zmm_map		equ	0x8000
C000:         	zmm_top		equ	0xC000
              	
0070:         	zmm_capt_set	equ	0b01110000
007F:         	zmm_capt_res	equ	0b01111111
              	
              	; General Z80 Stuff
0066:         	nmi_address	equ	0x0066
0067:         	nmi_vector	equ	nmi_address+1
              	
              	; NABU Specific Stuff
0000:         	nabu_nctl	equ	0x00	; NABU Control Register
0040:         	nabu_ay_data	equ	0x40	; AY-3-8910 Data Port
0041:         	nabu_at_latch	equ	0x41	; AY-3-8910 Latch Port
              	
              	; -------------------------------------
              	; ******** Additional Includes ********
              	; -------------------------------------
              	
              	#include "MEMORY.asm"
              	;
              	;********************************************************************
              	;*
              	;*                    Z M M   M E M O R Y
              	;* 
              	;*    The ZMM can be configured to have different amounts
              	;*    of memory installed. Instead of dicking around with 
              	;*    on-board jumpers, KRISYS will simply check what banks
              	;*    are available on startup. Memory will be dynamically
              	;*    allocated as needed by the client process.
              	;*
              	;*    Memory can be assigned to specific owners in the code.
              	;*    Valid owner IDs range from 1 to 254. Owner 0 is reserved
              	;*    for unallocatable banks.
              	;*
              	;********************************************************************
              	
              	; ----------------------------
              	; ********  Functions ********
              	; ----------------------------
              	
              	.area	_TEXT
              		
              	; Initalize the memory map
              	; Each bank of the ZMM will be probed, and writable
              	; banks will be recorded on the allocated bank map
              	;
              	; Returns nothing
              	; Uses: AF, BC, DE, HL
0103:         	mem_map_init:
              		; Go to virtual mode
0103: CDCF01  		call	zmm_set_virt
              		
              		; Reset free bank counter
0106: 3E00    		ld	a,0
0108: 321604  		ld	(banks_free),a
              		
              		; Write tags to all banks
010B: 0600    		ld	b,0
010D: 78      	0$:	ld	a,b
010E: CD3902  		call	zmm_bnk3_set
0111: 3200C0  		ld	(zmm_top),a
0114: ED44    		neg
0116: 3201C0  		ld	(zmm_top+1),a
0119: 04      		inc	b
011A: F20D01  		jp	p,0$
              		
              		; Mark any banks that record correctly
011D: 0600    		ld	b,0
011F: 211704  		ld	hl,alloc_bank_map
0122: AF      	1$:	xor	a
0123: 77      		ld	(hl),a
0124: 78      		ld	a,b
0125: CD3902  		call	zmm_bnk3_set
0128: 3A00C0  		ld	a,(zmm_top)
012B: B8      		cp	b
012C: C24401  		jp	nz,2$
012F: 3A01C0  		ld	a,(zmm_top+1)
0132: 4F      		ld	c,a
0133: 78      		ld	a,b
0134: ED44    		neg
0136: B9      		cp	c
0137: C24401  		jp	nz,2$
              	
              		; Mark it
013A: 3EFF    		ld	a,0xFF
013C: 77      		ld	(hl),a
013D: 3A1604  		ld	a,(banks_free)
0140: 3C      		inc	a
0141: 321604  		ld	(banks_free),a
              		
              		; Next
0144: 23      	2$:	inc	hl
0145: 04      		inc	b
0146: F22201  		jp	p,1$
              		
              		; Disable virtual mode
0149: CDDA01  		call	zmm_set_real
              		
              		; Print out result
014C: 3A1604  		ld	a,(banks_free)
014F: CD2303  		call	tohex
0152: ED536203		ld	(str_mem_init_cnt),de
0156: 113D03  		ld	de,str_mem_init
0159: CD0B03  		call	cpm_print
              		
              		; Do we actually have an acceptable amount of memory?
015C: 3A1604  		ld	a,(banks_free)
015F: 3D      		dec	a
0160: 3D      		dec	a
0161: FAA301  		jp	m,mem_empty
              		
              		; We do, return
0164: C9      		ret
              		
              	; Allocates a bank of memory
              	; Will produce an error if no banks are available,
              	; check (banks_free) to avoid
              	; D = Owner ID (1-254)
              	;
              	; Returns A = Bank #
              	; Uses: AF, BC, HL
0165:         	mem_alloc:
              		; Check and decrement free memory
0165: 3A1604  		ld	a,(banks_free)
0168: 3D      		dec	a
0169: 321604  		ld	(banks_free),a
016C: FAA301  		jp	m,mem_empty
              		
              		; Look for the first free bank
016F: 211704  		ld	hl,alloc_bank_map
0172: 018000  		ld	bc,0x0080
0175: 3EFF    		ld	a,0xFF
0177: EDB1    		cpir
              		
              		; Make sure we found something
0179: C2A301  		jp	nz,mem_empty
              		
              		; Save and exit
017C: 2B      		dec	hl
017D: 72      		ld	(hl),d
017E: 011704  		ld	bc,alloc_bank_map
0181: B7      		or	a
0182: ED42    		sbc	hl,bc
0184: 6F      		ld	l,a
0185: C9      		ret
              		
              	; Frees a bank of memory
              	; Safe to use on banks that are not free / not owned
              	; A = Bank #
              	; D = Owner ID (1-254)
              	;
              	; Returns nothing
              	; Uses: AF, BC, HL
0186:         	mem_free:
              		; Find location in memory
0186: 0600    		ld	b,0
0188: 4F      		ld	c,a
0189: 211704  		ld	hl,alloc_bank_map
018C: 09      		add	hl,bc
              		
              		; Check owner
018D: 7E      		ld	a,(hl)
018E: BA      		cp	d
018F: C0      		ret	nz
              		
              		; Free bank
0190: 3EFF    		ld	a,0xFF
0192: 77      		ld	(hl),a
              		
              		; Increment banks free
0193: 211604  		ld	hl,banks_free
0196: 34      		inc	(hl)
0197: C9      		ret
              		
              	; Free all banks by owner
              	; D = Owner ID (1-254)
              	;
              	; Returns nothing
              	; Uses: AF, BC, HL
0198:         	mem_free_all:
              		; Free a bank
0198: AF      		xor	a
0199: F5      	0$:	push	af
019A: CD8601  		call	mem_free
019D: F1      		pop	af
              		
              		; Next bank
019E: 3C      		inc	a
019F: F29901  		jp	p,0$
01A2: C9      		ret
              		
              	; Error out if empty
              	;
              	; Does not return
              	; Uses: N/A
01A3:         	mem_empty:
01A3: 116803  		ld	de,str_mem_empty
01A6: CD0B03  		call	cpm_print
01A9: C31E03  		jp	cpm_exit
              	
              	; -------------------------
              	; ******** Strings ********
              	; -------------------------
              	
              	.area	_DATA
              	
              	; Inital string that prints when the program is started
033D:         	str_mem_init:
033D: 494E4954		defb	'INITIALIZED MEMORY MAP',0x0A,0x0D
0341: 49414C49	
0345: 5A454420	
0349: 4D454D4F	
034D: 5259204D	
0351: 41500A0D	
0355: 42414E4B		defb	'BANK COUNT = '
0359: 20434F55	
035D: 4E54203D	
0361: 20      	
0362:         	str_mem_init_cnt:
0362: 5858480A		defb	'XXH',0x0A,0x0D,'$'
0366: 0D24    	
              		
0368:         	str_mem_empty:
0368: 494E5355		defb	'INSUFFICIENT MEMORY',0x0A,0x0D,'$'
036C: 46464943	
0370: 49454E54	
0374: 204D454D	
0378: 4F52590A	
037C: 0D24    	
              	
              	; ---------------------------
              	; ******** Variables ********
              	; ---------------------------
              	
              	.area	_BSS
              	
              	; Free bank count
0416:         	banks_free:
0416: 00      		defs	1
              	
              	; Allocated bank map
              	; This 128 byte table keeps track of every single 16K bank
              	; that exists on the ZMM. Populated on startup
0417:         	alloc_bank_map:
0417: 00000000		defs	128
041B: 00...   	
              	#include "ZMM.asm"
              	;
              	;********************************************************************
              	;*
              	;*                  Z M M   M A N A G E M E N T
              	;* 
              	;*    These routines are used to manage the state of the ZMM.
              	;*    This includes the setting of the registers as well as setting
              	;*    up trap and interrupt stuff.
              	;*
              	;********************************************************************
              	
              	; ----------------------------
              	; ********  Functions ********
              	; ----------------------------
              	
              	.area	_TEXT
              	
              	; Initalize ZMM and reset registers
              	;
              	; Returns nothing
              	; Uses: AF
01AC:         	zmm_init:
              		; Zero out control register
01AC: 3E00    		ld	a,0
01AE: 329704  		ld	(zmm_ctrl_state),a
01B1: 329804  		ld	(zmm_bnk0_state),a
01B4: 329904  		ld	(zmm_bnk1_state),a
01B7: 329A04  		ld	(zmm_bnk2_state),a
01BA: 329B04  		ld	(zmm_bnk3_state),a
              		
              		; See if we can swing in and out of virtual mode
01BD: CDCF01  		call	zmm_set_virt
01C0: CDDA01  		call	zmm_set_real
              		
              		; Tell the user that the ZMM is read
01C3: 117E03  		ld	de,str_zmm_init
01C6: C30B03  		jp	cpm_print
              		
              	; Set the ZMM control register to the recorded state
              	; (zmm_ctrl_state) = New value of ZMM control register
              	;
              	; Returns nothing
              	; Uses: AF
01C9:         	zmm_ctrl_set:
01C9: 3A9704  		ld	a,(zmm_ctrl_state)
01CC: D334    		out	(zmm_ctrl),a
01CE: C9      		ret
              		
              	; Go to virtual mode
              	;
              	; Returns nothing
              	; Uses: AF
01CF:         	zmm_set_virt:
01CF: 3A9704  		ld	a,(zmm_ctrl_state)
01D2: F601    		or	0b00000001
01D4: 329704  		ld	(zmm_ctrl_state),a
01D7: D334    		out	(zmm_ctrl),a
01D9: C9      		ret
              		
              	; Go to real mode
              	;
              	; Returns nothing
              	; Uses: AF
01DA:         	zmm_set_real:
01DA: 3A9704  		ld	a,(zmm_ctrl_state)
01DD: E6FE    		and	0b11111110
01DF: 329704  		ld	(zmm_ctrl_state),a
01E2: D334    		out	(zmm_ctrl),a
01E4: C9      		ret
              		
              	; Set program direction to "IN"
              	;
              	; Returns nothing
              	; Uses: AF
01E5:         	zmm_prgm_in:
01E5: 3A9704  		ld	a,(zmm_ctrl_state)
01E8: F602    		or	0b00000010
01EA: 329704  		ld	(zmm_ctrl_state),a
01ED: D334    		out	(zmm_ctrl),a
01EF: C9      		ret
              		
              	; Set program direction to "OUT"
              	;
              	; Returns nothing
              	; Uses: AF
01F0:         	zmm_prgm_out:
01F0: 3A9704  		ld	a,(zmm_ctrl_state)
01F3: E6FD    		and	0b11111101
01F5: 329704  		ld	(zmm_ctrl_state),a
01F8: D334    		out	(zmm_ctrl),a
01FA: C9      		ret
              		
              	; Turn on irq intercept mode
              	;
              	; Returns nothing
              	; Uses: AF
01FB:         	zmm_irq_inter:
01FB: 3A9704  		ld	a,(zmm_ctrl_state)
01FE: F604    		or	0b00000100
0200: 329704  		ld	(zmm_ctrl_state),a
0203: D334    		out	(zmm_ctrl),a
0205: C9      		ret
              		
              	; Turn off irq intercept mode
              	;
              	; Returns nothing
              	; Uses: AF
0206:         	zmm_irq_normal:
0206: 3A9704  		ld	a,(zmm_ctrl_state)
0209: E6FB    		and	0b11111011
020B: 329704  		ld	(zmm_ctrl_state),a
020E: D334    		out	(zmm_ctrl),a
0210: C9      		ret
              	
              	; Turn on force virtual irq
              	;
              	; Returns nothing
              	; Uses: AF
0211:         	zmm_irq_on:
0211: 3A9704  		ld	a,(zmm_ctrl_state)
0214: F608    		or	0b00001000
0216: 329704  		ld	(zmm_ctrl_state),a
0219: D334    		out	(zmm_ctrl),a
021B: C9      		ret
              		
              	; Turn off force virtual irq
              	;
              	; Returns nothing
              	; Uses: AF
021C:         	zmm_irq_off:
021C: 3A9704  		ld	a,(zmm_ctrl_state)
021F: E6F7    		and	0b11110111
0221: 329704  		ld	(zmm_ctrl_state),a
0224: D334    		out	(zmm_ctrl),a
0226: C9      		ret
              		
              	; Set bank 0
              	; A = Bank to set
              	;
              	; Returns nothing
              	; Uses: nothing
0227:         	zmm_bnk0_set:
0227: 329804  		ld	(zmm_bnk0_state),a
022A: D330    		out	(zmm_bnk0),a
022C: C9      		ret
              		
              	; Set bank 1
              	; A = Bank to set
              	;
              	; Returns nothing
              	; Uses: nothing
022D:         	zmm_bnk1_set:
022D: 329904  		ld	(zmm_bnk1_state),a
0230: D331    		out	(zmm_bnk1),a
0232: C9      		ret
              		
              	; Set bank 2
              	; A = Bank to set
              	;
              	; Returns nothing
              	; Uses: nothing
0233:         	zmm_bnk2_set:
0233: 329A04  		ld	(zmm_bnk2_state),a
0236: D332    		out	(zmm_bnk2),a
0238: C9      		ret
              		
              	; Set bank 3
              	; A = Bank to set
              	;
              	; Returns nothing
              	; Uses: nothing
0239:         	zmm_bnk3_set:
0239: 329B04  		ld	(zmm_bnk3_state),a
023C: D333    		out	(zmm_bnk3),a
023E: C9      		ret
              		
              	; -------------------------
              	; ******** Strings ********
              	; -------------------------
              	
              	.area	_DATA
              	
              	; Inital string that prints when the program is started
037E:         	str_zmm_init:
037E: 494E4954		defb	'INITIALIZED ZMM',0x0A,0x0D,'$'
0382: 49414C49	
0386: 5A454420	
038A: 5A4D4D0A	
038E: 0D24    	
              		
              	; ---------------------------
              	; ******** Variables ********
              	; ---------------------------
              	
              	.area	_BSS
              	
              	; Reflected state of control register
0497:         	zmm_ctrl_state:
0497: 00      		defs	1
              		
              	; Bank 0 state
0498:         	zmm_bnk0_state:
0498: 00      		defs	1
              		
              	; Bank 1 state
0499:         	zmm_bnk1_state:
0499: 00      		defs	1
              		
              	; Bank 2 state
049A:         	zmm_bnk2_state:
049A: 00      		defs	1
              		
              	; Bank 3 state
049B:         	zmm_bnk3_state:
049B: 00      		defs	1
              		
              	#include "RESOURCE.asm"
              	;
              	;********************************************************************
              	;*
              	;*               R E S O U R C E   M A N A G E M E N T
              	;* 
              	;*    These routines handle obtaining use-supplied resources
              	;*    such as configurations, ROM images, and storage bindings.
              	;*    During startup, these resources will be loaded to build
              	;*    the virtual machine.
              	;*
              	;********************************************************************
              	
              	; -------------------------
              	; ******** Equates ********
              	; -------------------------
              	
0010:         	arg_size	equ 16
              	
              	; ----------------------------
              	; ********  Functions ********
              	; ----------------------------
              	
              	.area	_TEXT
              	
              	; Initalize resources
              	;
              	; Returns nothing
              	; Uses: AF, BC, HL
023F:         	res_init:
              		; Start by zero-terminating string
023F: 218000  		ld	hl,cpm_command
0242: 4E      		ld	c,(hl)
0243: 0600    		ld	b,0
0245: 09      		add	hl,bc
0246: 23      		inc	hl
0247: 70      		ld	(hl),b
              		
0248: C9      		ret
              		
              	; Opens a file based on the resource argument
              	; If the file cannot be opened, an error will be thrown
              	; (res_argument) = File to open
              	;
              	; Returns nothing
0249:         	res_open:
              	
              		; TODO: remove
0249: C35D02  		jp	0$
              	
              		; Virtual mode should be off while we do this
024C: 3A9704  		ld	a,(zmm_ctrl_state)
024F: F5      		push	af
0250: CDDA01  		call	zmm_set_real
              		
              		; Do function call
0253: CD5D02  		call	0$
              		
              		; Restore register
0256: F1      		pop	af
0257: 329704  		ld	(zmm_ctrl_state),a
025A: C3C901  		jp	zmm_ctrl_set
              		
              		; Let the user know we are loading stuff
025D: 0E09    	0$:	ld	c,bdos_print
025F: 119003  		ld	de,str_load_a
0262: CD0500  		call	bdos
              		
              		; Print resource name
0265: 21AD04  		ld	hl,res_current
0268: 5E      		ld	e,(hl)
0269: 23      		inc	hl
026A: 56      		ld	d,(hl)
026B: CD7D02  		call	res_printzt
              		
              		; Next string
026E: 0E09    		ld	c,bdos_print
0270: 119903  		ld	de,str_load_b
0273: CD0500  		call	bdos
              		
              		; Print file name
0276: 119C04  		ld	de,res_argument
0279: CD7D02  		call	res_printzt
              		
027C: C9      		ret
              		
              		
              	; Print a zero terminated string
              	; We should be in real mode for this
              	; DE = String
              	;
              	; Returns nothing
              	; Uses: All
027D:         	res_printzt:
027D: 1A      	0$:	ld	a,(de)
027E: B7      		or	a
027F: C8      		ret	z
              		
              		; Print character
0280: D5      		push	de
0281: 5F      		ld	e,a
0282: 0E02    		ld	c,bdos_con_out
0284: CD0500  		call	bdos
0287: D1      		pop	de
0288: 13      		inc	de
0289: C37D02  		jp	0$
              	
              	; Find a resource from the command line
              	; If the resource is found, the contents will be cached in memory
              	; DE = Name of resource (upper case only) 
              	;
              	; Returns A = 0xFF if no resource is found
              	; Uses: AF, BC, DE, HL
028C:         	res_locate:
              		; Save resource
028C: ED53AD04		ld	(res_current),de
              	
              		; Travel to the start of arguments
0290: 218100  		ld	hl,cpm_command+1
0293: 7E      	0$:	ld	a,(hl)
0294: B7      		or	a
0295: CAF202  		jp	z,99$
0298: FE21    		cp	0x21
029A: D2A102  		jp	nc,1$
029D: 23      		inc	hl
029E: C39302  		jp	0$
              		
              		; Found an argument
              		; Check it against the contents of (DE)
              		; Also must start with '-'
02A1: FE2D    	1$:	cp	'-'
02A3: C2B402  		jp	nz,3$
02A6: 23      		inc	hl
02A7: D5      		push	de
02A8: 1A      	2$:	ld	a,(de)
              		
              		; Check if at end of string
02A9: B7      		or	a
02AA: CAC202  		jp	z,4$
              		
              		; No? Well lets see if (de) = (hl)
02AD: BE      		cp	(hl)
02AE: 23      		inc	hl
02AF: 13      		inc	de
02B0: CAA802  		jp	z,2$
              		
              		; Strings are different!
              		; Escape from the current argument and continue
02B3: D1      		pop	de
02B4: 7E      	3$:	ld	a,(hl)
02B5: B7      		or	a
02B6: CAF202  		jp	z,99$
02B9: FE21    		cp	0x21
02BB: DA9302  		jp	c,0$
02BE: 23      		inc	hl
02BF: C3B402  		jp	3$
              	
              		; Make sure we are at the end of the argument as well
02C2: D1      	4$: 	pop	de
02C3: 7E      		ld	a,(hl)
02C4: FE21    		cp	0x21
02C6: D2B402  		jp	nc,3$
              		
              		; Ok, lets copy the argument into memory if it exists
02C9: 119C04  		ld	de,res_argument
02CC: AF      		xor	a
02CD: 12      		ld	(de),a
              		
              		; Travel to the start of the argument
02CE: 7E      	5$:	ld	a,(hl)
02CF: B7      		or	a
02D0: CAF002  		jp	z,89$
02D3: FE21    		cp	0x21
02D5: D2DC02  		jp	nc,6$
02D8: 23      		inc	hl
02D9: C3CE02  		jp	5$
              	
              		; Make sure it doesn't start with '-'
02DC: FE2D    	6$:	cp	'-'
02DE: CAF002  		jp	z,89$
              		
              		; Ok, lets copy up 16 bytes of this
02E1: 0610    		ld	b,arg_size
02E3: 7E      	7$:	ld	a,(hl)
02E4: FE21    		cp	0x21
02E6: DAEE02  		jp	c,8$
02E9: 12      		ld	(de),a
02EA: 23      		inc	hl
02EB: 13      		inc	de
02EC: 10F5    		djnz	7$
              	
              		; Zero terminate
02EE: AF      	8$:	xor	a
02EF: 12      		ld	(de),a
              		
              		; Good ending
02F0: AF      	89$:	xor	a
02F1: C9      		ret
              	
              		; Bad ending
02F2: 3EFF    	99$:	ld	a,0xFF
02F4: C9      		ret
              		
              	; -------------------------
              	; ******** Strings ********
              	; -------------------------
              	
              	.area	_DATA
              	
              	; Loading string components
0390:         	str_load_a:
0390: 4C4F4144		defb	'LOADING $'
0394: 494E4720	
0398: 24      	
              		
0399:         	str_load_b:
0399: 2046524F		defb	' FROM $'
039D: 4D2024  	
              		
              	; Error messages
03A0:         	str_arg_empty:
03A0: 4E4F2041		defb	'NO ARGUMENT PROVIDED',0x0A,0x0D,'$'
03A4: 5247554D	
03A8: 454E5420	
03AC: 50524F56	
03B0: 49444544	
03B4: 0A0D24  	
              		
03B7:         	str_arg_fail:
03B7: 4641494C		defb	'FAILED TO OPEN FILE',0x0A,0x0D,'$'
03BB: 45442054	
03BF: 4F204F50	
03C3: 454E2046	
03C7: 494C450A	
03CB: 0D24    	
              		
              	; ---------------------------
              	; ******** Variables ********
              	; ---------------------------
              	
              	.area	_BSS
              	
              	; Stores a zero-terminated string for the resource argument
049C:         	res_argument:
049C: 00000000		defs	arg_size+1
04A0: 00...   	
              		
              	; Current resource being accessed
04AD:         	res_current:
04AD: 00000000		defs	arg_size+1
04B1: 00...   	
              		
              	; File control block for use in loading resources
04BE:         	res_fcb:
04BE: 00000000		defs	36
04C2: 00...   	
04BE:         	res_fcb_drive	equ	res_fcb
04BF:         	res_fcb_name	equ	res_fcb+1
04C7:         	res_fcb_type	equ	res_fcb+9
04CA:         	res_fcb_ex	equ	res_fcb+12
04CB:         	res_fcb_s1	equ	res_fcb+13
04CC:         	res_fcb_s2	equ	res_fcb+14
04CD:         	res_fcb_rc	equ	res_fcb+15
04CE:         	res_fcb_data	equ	res_fcb+16
04DE:         	res_fcb_cr	equ	res_fcb+32
04DF:         	res_fcb_r0	equ	res_fcb+33
04E0:         	res_fcb_r1	equ	res_fcb+34
04E1:         	res_fcb_r2	equ	res_fcb+35
              	
              	; --------------------------------
              	; ******** KRISYS Startup ********
              	; --------------------------------
              	
              	.area	_TEXT
              		
              		; KRISYS entry point
02F5:         	kri_start:	
              		; Set up stack
02F5: F3      		di
02F6: 310070  		ld	sp,zmm_capture
02F9: 211E03  		ld	hl,cpm_exit
02FC: E5      		push	hl
              		
              		; Print "hello" splash
02FD: 0E09    		ld	c,bdos_print
02FF: 11CD03  		ld	de,str_splash
0302: CD0500  		call	bdos
              		
              		; Initalize subcomponents
              		;call	zmm_init
              		;call	mem_map_init
0305: CD3F02  		call	res_init
              		
              		
              		; Start the core
0308: C33A03  		jp	core_start
              		
              	; ------------------------------
              	; ******** CP/M Service ********
              	; ------------------------------
              		
              	; Print something to the CP/M console
              	; DE = Address of string to print
              	;
              	; Returns nothing
              	; Uses: All
030B:         	cpm_print:
              		; Save control register state
030B: 3A9704  		ld	a,(zmm_ctrl_state)
030E: F5      		push	af
              		
              		; Go to real mode
030F: CDDA01  		call zmm_set_real
              		
              		; Do BDOS call
0312: 0E09    		ld	c,bdos_print
0314: CD0500  		call	bdos
              		
              		; Restore register
0317: F1      		pop	af
0318: 329704  		ld	(zmm_ctrl_state),a
031B: C3C901  		jp	zmm_ctrl_set
              		
              	; Go back to CP/M
              	;
              	; Does not return
              	; Uses: N/A
031E:         	cpm_exit:
031E: 0E00    		ld	c,bdos_exit
0320: CD0500  		call	bdos	
              		
              	; ----------------------
              	; ******** Misc ********
              	; ----------------------
              		
              	; Converts the value into an 8 bit hex number
              	; A = Number to convert
              	;
              	; Returns DE = result
              	; Uses: AF, DE
0323: 57      	tohex:	ld	d,a
0324: CD2E03  		call	0$
0327: 5F      		ld	e,a
0328: 7A      		ld	a,d
0329: CD3203  		call	1$
032C: 57      		ld	d,a
032D: C9      		ret
              		
032E: 1F      	0$:	rra
032F: 1F      		rra
0330: 1F      		rra
0331: 1F      		rra
0332: F6F0    	1$:	or	0xF0
0334: 27      		daa
0335: C6A0    		add	a,0xA0
0337: CE40    		adc	a,0x40
0339: C9      		ret
              	
              	; -------------------------
              	; ******** Strings ********
              	; -------------------------
              	
              	.area	_DATA
              	
              	; Inital string that prints when the program is started
03CD:         	str_splash:
03CD: 4944454E		defb	'IDENTITY KRISYS HYPERVISOR, CP/M EDT.',0x0A,0x0D
03D1: 54495459	
03D5: 204B5249	
03D9: 53595320	
03DD: 48595045	
03E1: 52564953	
03E5: 4F522C20	
03E9: 43502F4D	
03ED: 20454454	
03F1: 2E0A0D  	
03F4: 5645522E		defb	'VER. 0.0.1, GAVIN TERSTEEG 2024'
03F8: 20302E30	
03FC: 2E312C20	
0400: 47415649	
0404: 4E205445	
0408: 52535445	
040C: 45472032	
0410: 303234  	
              		
              	; Carriage return, line break
0413:         	str_crlf:
0413: 0A0D24  		defb	0x0A,0x0D,'$' 
              		
              	
              	; ---------------------------
              	; ******** Core Init ********
              	; ---------------------------
              	
              	.area	_TEXT
              	
              	; Start of ColecoVision core
033A:         	core_start:
033A: C31E03  		jp	cpm_exit


; +++ segments +++

#CODE _TEXT    = $0100 =   256,  size = $023D =   573
#CODE _DATA    = $033D =   829,  size = $00D9 =   217
#DATA _BSS     = $0416 =  1046,  size = $00CC =   204

; +++ global symbols +++

_BSS             = $0416 =  1046  _BSS    KRISYS.asm:28 (unused)
_BSS_end         = $04E2 =  1250  _BSS    KRISYS.asm:28
_BSS_size        = $00CC =   204  _BSS    KRISYS.asm:28 (unused)
_DATA            = $033D =   829  _DATA   KRISYS.asm:27 (unused)
_DATA_end        = $0416 =  1046  _DATA   KRISYS.asm:27
_DATA_size       = $00D9 =   217  _DATA   KRISYS.asm:27 (unused)
_TEXT            = $0100 =   256  _TEXT   KRISYS.asm:26 (unused)
_TEXT_end        = $033D =   829  _TEXT   KRISYS.asm:26
_TEXT_size       = $023D =   573  _TEXT   KRISYS.asm:26 (unused)
alloc_bank_map   = $0417 =  1047  _BSS    MEMORY.asm:211
arg_size         = $0010 =    16  _BSS    RESOURCE.asm:17
banks_free       = $0416 =  1046  _BSS    MEMORY.asm:205
bdos             = $0005 =     5  _TEXT   KRISYS.asm:49
bdos_con_in      = $0001 =     1  _TEXT   KRISYS.asm:51 (unused)
bdos_con_out     = $0002 =     2  _TEXT   KRISYS.asm:52
bdos_exit        = $0000 =     0  _TEXT   KRISYS.asm:50
bdos_print       = $0009 =     9  _TEXT   KRISYS.asm:53
core_start       = $033A =   826  _TEXT   KCOLECO.asm:17
cpm_command      = $0080 =   128  _TEXT   KRISYS.asm:55
cpm_exit         = $031E =   798  _TEXT   KRISYS.asm:150
cpm_print        = $030B =   779  _TEXT   KRISYS.asm:129
kri_start        = $02F5 =   757  _TEXT   KRISYS.asm:99
mem_alloc        = $0165 =   357  _TEXT   MEMORY.asm:103 (unused)
mem_empty        = $01A3 =   419  _TEXT   MEMORY.asm:177
mem_free         = $0186 =   390  _TEXT   MEMORY.asm:135
mem_free_all     = $0198 =   408  _TEXT   MEMORY.asm:161 (unused)
mem_map_init     = $0103 =   259  _TEXT   MEMORY.asm:30 (unused)
nabu_at_latch    = $0041 =    65  _TEXT   KRISYS.asm:82 (unused)
nabu_ay_data     = $0040 =    64  _TEXT   KRISYS.asm:81 (unused)
nabu_nctl        = $0000 =     0  _TEXT   KRISYS.asm:80 (unused)
nmi_address      = $0066 =   102  _TEXT   KRISYS.asm:76
nmi_vector       = $0067 =   103  _TEXT   KRISYS.asm:77 (unused)
res_argument     = $049C =  1180  _BSS    RESOURCE.asm:230
res_current      = $04AD =  1197  _BSS    RESOURCE.asm:234
res_fcb          = $04BE =  1214  _BSS    RESOURCE.asm:238
res_fcb_cr       = $04DE =  1246  _BSS    RESOURCE.asm:248 (unused)
res_fcb_data     = $04CE =  1230  _BSS    RESOURCE.asm:247 (unused)
res_fcb_drive    = $04BE =  1214  _BSS    RESOURCE.asm:240 (unused)
res_fcb_ex       = $04CA =  1226  _BSS    RESOURCE.asm:243 (unused)
res_fcb_name     = $04BF =  1215  _BSS    RESOURCE.asm:241 (unused)
res_fcb_r0       = $04DF =  1247  _BSS    RESOURCE.asm:249 (unused)
res_fcb_r1       = $04E0 =  1248  _BSS    RESOURCE.asm:250 (unused)
res_fcb_r2       = $04E1 =  1249  _BSS    RESOURCE.asm:251 (unused)
res_fcb_rc       = $04CD =  1229  _BSS    RESOURCE.asm:246 (unused)
res_fcb_s1       = $04CB =  1227  _BSS    RESOURCE.asm:244 (unused)
res_fcb_s2       = $04CC =  1228  _BSS    RESOURCE.asm:245 (unused)
res_fcb_type     = $04C7 =  1223  _BSS    RESOURCE.asm:242 (unused)
res_init         = $023F =   575  _TEXT   RESOURCE.asm:29
res_locate       = $028C =   652  _TEXT   RESOURCE.asm:113 (unused)
res_open         = $0249 =   585  _TEXT   RESOURCE.asm:45 (unused)
res_printzt      = $027D =   637  _TEXT   RESOURCE.asm:93
stack_size       = $0020 =    32          KRISYS.asm:31
str_arg_empty    = $03A0 =   928  _DATA   RESOURCE.asm:217 (unused)
str_arg_fail     = $03B7 =   951  _DATA   RESOURCE.asm:220 (unused)
str_crlf         = $0413 =  1043  _DATA   KRISYS.asm:193 (unused)
str_load_a       = $0390 =   912  _DATA   RESOURCE.asm:210
str_load_b       = $0399 =   921  _DATA   RESOURCE.asm:213
str_mem_empty    = $0368 =   872  _DATA   MEMORY.asm:195
str_mem_init     = $033D =   829  _DATA   MEMORY.asm:189
str_mem_init_cnt = $0362 =   866  _DATA   MEMORY.asm:192
str_splash       = $03CD =   973  _DATA   KRISYS.asm:188
str_zmm_init     = $037E =   894  _DATA   ZMM.asm:184
tohex            = $0323 =   803  _TEXT   KRISYS.asm:163
zmm_addr_hi      = $0032 =    50  _TEXT   KRISYS.asm:64 (unused)
zmm_addr_lo      = $0033 =    51  _TEXT   KRISYS.asm:65 (unused)
zmm_bnk0         = $0030 =    48  _TEXT   KRISYS.asm:58
zmm_bnk0_set     = $0227 =   551  _TEXT   ZMM.asm:142 (unused)
zmm_bnk0_state   = $0498 =  1176  _BSS    ZMM.asm:198
zmm_bnk1         = $0031 =    49  _TEXT   KRISYS.asm:59
zmm_bnk1_set     = $022D =   557  _TEXT   ZMM.asm:152 (unused)
zmm_bnk1_state   = $0499 =  1177  _BSS    ZMM.asm:202
zmm_bnk2         = $0032 =    50  _TEXT   KRISYS.asm:60
zmm_bnk2_set     = $0233 =   563  _TEXT   ZMM.asm:162 (unused)
zmm_bnk2_state   = $049A =  1178  _BSS    ZMM.asm:206
zmm_bnk3         = $0033 =    51  _TEXT   KRISYS.asm:61
zmm_bnk3_set     = $0239 =   569  _TEXT   ZMM.asm:172
zmm_bnk3_state   = $049B =  1179  _BSS    ZMM.asm:210
zmm_capt_res     = $007F =   127  _TEXT   KRISYS.asm:73 (unused)
zmm_capt_set     = $0070 =   112  _TEXT   KRISYS.asm:72 (unused)
zmm_capture      = $7000 = 28672  _TEXT   KRISYS.asm:68
zmm_ctrl         = $0034 =    52  _TEXT   KRISYS.asm:62
zmm_ctrl_set     = $01C9 =   457  _TEXT   ZMM.asm:44
zmm_ctrl_state   = $0497 =  1175  _BSS    ZMM.asm:194
zmm_init         = $01AC =   428  _TEXT   ZMM.asm:22 (unused)
zmm_irq_inter    = $01FB =   507  _TEXT   ZMM.asm:97 (unused)
zmm_irq_normal   = $0206 =   518  _TEXT   ZMM.asm:108 (unused)
zmm_irq_off      = $021C =   540  _TEXT   ZMM.asm:130 (unused)
zmm_irq_on       = $0211 =   529  _TEXT   ZMM.asm:119 (unused)
zmm_isr          = $0030 =    48  _TEXT   KRISYS.asm:63 (unused)
zmm_map          = $8000 = 32768  _TEXT   KRISYS.asm:69 (unused)
zmm_prgm_in      = $01E5 =   485  _TEXT   ZMM.asm:75 (unused)
zmm_prgm_out     = $01F0 =   496  _TEXT   ZMM.asm:86 (unused)
zmm_set_real     = $01DA =   474  _TEXT   ZMM.asm:64
zmm_set_virt     = $01CF =   463  _TEXT   ZMM.asm:53
zmm_top          = $C000 = 49152  _TEXT   KRISYS.asm:70
zmm_trap         = $0037 =    55  _TEXT   KRISYS.asm:66 (unused)


total time: 0.3049 sec.
no errors
