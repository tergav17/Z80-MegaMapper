              	; --------------------------------------
              	; zasm: assemble "KCOLECO.asm"
              	; date: 2024-08-17 23:33:38
              	; --------------------------------------


              	;
              	;********************************************************************
              	;*
              	;*        K R I S Y S   C O L E C O V I S I O N   C O R E
              	;*
              	;********************************************************************
              	
              	#include "KRISYS.asm"
              	;
              	;********************************************************************
              	;*
              	;*              I D E N T I T Y   K R I S Y S
              	;*
              	;*      The [K]lunkly [R]emapper / [I]nterpreter [SYS]tem
              	;*
              	;*             Written by Gavin Tersteeg, 2024
              	;*              Copyleft, All Wrongs Reserved
              	;*
              	;*
              	;*   This piece of software allows different classic Z80 systems
              	;*   to run as "virtual machines" on top of existing hardware by
              	;*   use of a ZMM (Z80 MEGAMAPPER). It does this by remapping RAM
              	;*   and I/O address space ot match that of it's target system.
              	;*   Anything that can't be emulated by simple remapping is instead
              	;*   interpreted using I/O traps. 
              	;*
              	;*   This allows virtualized machines to run with an acceptable
              	;*   degree of speed and accuracy. While the ZMM is still quite
              	;*   limited in what sort of hardware can be efficiently virtualized,
              	;*   anything that avoids MMIO or graphics hardware that isn't a VDP
              	;*   generally can be made to work.
              	;* 
              	;********************************************************************
              		
              	; ----------------------------
              	; ******** ZASM Setup ********
              	; ----------------------------
              	
0020:         	stack_size = 0x20
              	
              	#target BIN
0100:         	#code	_TEXT,0x0100	; Setup to run as a CP/M executable
04C3:         	#code	_DATA,_TEXT_end
059C:         	#data	_BSS,_DATA_end
              	
              	; Make sure w don't overrun available memory
              	#assert	_BSS_end < (zmm_capture-stack_size)
              	
              	.area	_TEXT
0100: C36D04  		jp	kri_start
              	
              	; -------------------------
              	; ******** Equates ********
              	; -------------------------
              	
              	; CP/M Stuff
0005:         	bdos		equ	0x0005
0000:         	bdos_exit	equ	0x00
0001:         	bdos_con_in	equ	0x01
0002:         	bdos_con_out	equ	0x02
0009:         	bdos_print	equ	0x09
000F:         	bdos_open	equ	0x0F
0014:         	bdos_read	equ	0x14
001A:         	bios_set_dma	equ	0x1A
              	
0080:         	cpm_command	equ	0x0080
              	
              	; Z80 MEGAMAPPER Stuff
0030:         	zmm_bnk0	equ	0x30	; 16K Bank 0 (0x0000 - 0x3FFF)
0031:         	zmm_bnk1	equ	0x31	; 16K Bank 1 (0x4000 - 0x7FFF)
0032:         	zmm_bnk2	equ	0x32	; 16K Bank 2 (0x8000 - 0xBFFF)
0033:         	zmm_bnk3	equ	0x33	; 16K Bank 3 (0xC000 - 0xFFFF)
0034:         	zmm_ctrl	equ	0x34	; ZMM Control Register
0030:         	zmm_isr		equ	0x30	; ZMM Trapped Instruction Register
0032:         	zmm_addr_hi	equ	0x32	; ZMM Trap Address High
0033:         	zmm_addr_lo	equ	0x33	; ZMM Trap Address Low
0037:         	zmm_trap	equ	0x37 	; ZMM Trap Vector
              	
7000:         	zmm_capture	equ	0x7000
8000:         	zmm_map		equ	0x8000
C000:         	zmm_top		equ	0xC000
              	
0070:         	zmm_capt_set	equ	0b01110000
007F:         	zmm_capt_res	equ	0b01111111
              	
              	; General Z80 Stuff
0066:         	nmi_address	equ	0x0066
0067:         	nmi_vector	equ	nmi_address+1
              	
              	; NABU Specific Stuff
0000:         	nabu_nctl	equ	0x00	; NABU Control Register
0040:         	nabu_ay_data	equ	0x40	; AY-3-8910 Data Port
0041:         	nabu_at_latch	equ	0x41	; AY-3-8910 Latch Port
              	
              	; Stack / Trap Management
7000:         	kri_stack	equ	zmm_capture
6FFF:         	trap_a_value	equ	kri_stack-1
6FFE:         	trap_f_value	equ	kri_stack-2
              	
              	; -------------------------------------
              	; ******** Additional Includes ********
              	; -------------------------------------
              	
              	#include "MEMORY.asm"
              	;
              	;********************************************************************
              	;*
              	;*                    Z M M   M E M O R Y
              	;* 
              	;*    The ZMM can be configured to have different amounts
              	;*    of memory installed. Instead of dicking around with 
              	;*    on-board jumpers, KRISYS will simply check what banks
              	;*    are available on startup. Memory will be dynamically
              	;*    allocated as needed by the client process.
              	;*
              	;*    Memory can be assigned to specific owners in the code.
              	;*    Valid owner IDs range from 1 to 254. Owner 0 is reserved
              	;*    for unallocatable banks.
              	;*
              	;********************************************************************
              	
              	; ----------------------------
              	; ********  Functions ********
              	; ----------------------------
              	
              	.area	_TEXT
              		
              	; Initalize the memory map
              	; Each bank of the ZMM will be probed, and writable
              	; banks will be recorded on the allocated bank map
              	;
              	; Returns nothing
              	; Uses: AF, BC, DE, HL
0103:         	mem_map_init:
              		; Go to virtual mode
0103: CDCF01  		call	zmm_set_virt
              		
              		; Reset free bank counter
0106: 3E00    		ld	a,0
0108: 329C05  		ld	(banks_free),a
              		
              		; Write tags to all banks
010B: 0600    		ld	b,0
010D: 78      	0$:	ld	a,b
010E: CD3902  		call	zmm_bnk3_set
0111: 3200C0  		ld	(zmm_top),a
0114: ED44    		neg
0116: 3201C0  		ld	(zmm_top+1),a
0119: 04      		inc	b
011A: F20D01  		jp	p,0$
              		
              		; Mark any banks that record correctly
011D: 0600    		ld	b,0
011F: 219D05  		ld	hl,alloc_bank_map
0122: AF      	1$:	xor	a
0123: 77      		ld	(hl),a
0124: 78      		ld	a,b
0125: CD3902  		call	zmm_bnk3_set
0128: 3A00C0  		ld	a,(zmm_top)
012B: B8      		cp	b
012C: C24401  		jp	nz,2$
012F: 3A01C0  		ld	a,(zmm_top+1)
0132: 4F      		ld	c,a
0133: 78      		ld	a,b
0134: ED44    		neg
0136: B9      		cp	c
0137: C24401  		jp	nz,2$
              	
              		; Mark it
013A: 3EFF    		ld	a,0xFF
013C: 77      		ld	(hl),a
013D: 3A9C05  		ld	a,(banks_free)
0140: 3C      		inc	a
0141: 329C05  		ld	(banks_free),a
              		
              		; Next
0144: 23      	2$:	inc	hl
0145: 04      		inc	b
0146: F22201  		jp	p,1$
              		
              		; Disable virtual mode
0149: CDDA01  		call	zmm_set_real
              		
              		; Print out result
014C: 3A9C05  		ld	a,(banks_free)
014F: CDA404  		call	tohex
0152: ED53E804		ld	(str_mem_init_cnt),de
0156: 11C304  		ld	de,str_mem_init
0159: CD8C04  		call	cpm_print
              		
              		; Do we actually have an acceptable amount of memory?
015C: 3A9C05  		ld	a,(banks_free)
015F: 3D      		dec	a
0160: 3D      		dec	a
0161: FAA301  		jp	m,mem_empty
              		
              		; We do, return
0164: C9      		ret
              		
              	; Allocates a bank of memory
              	; Will produce an error if no banks are available,
              	; check (banks_free) to avoid
              	; D = Owner ID (1-254)
              	;
              	; Returns A = Bank #
              	; Uses: AF, BC, HL
0165:         	mem_alloc:
              		; Check and decrement free memory
0165: 3A9C05  		ld	a,(banks_free)
0168: 3D      		dec	a
0169: 329C05  		ld	(banks_free),a
016C: FAA301  		jp	m,mem_empty
              		
              		; Look for the first free bank
016F: 219D05  		ld	hl,alloc_bank_map
0172: 018000  		ld	bc,0x0080
0175: 3EFF    		ld	a,0xFF
0177: EDB1    		cpir
              		
              		; Make sure we found something
0179: C2A301  		jp	nz,mem_empty
              		
              		; Save and exit
017C: 2B      		dec	hl
017D: 72      		ld	(hl),d
017E: 019D05  		ld	bc,alloc_bank_map
0181: B7      		or	a
0182: ED42    		sbc	hl,bc
0184: 6F      		ld	l,a
0185: C9      		ret
              		
              	; Frees a bank of memory
              	; Safe to use on banks that are not free / not owned
              	; A = Bank #
              	; D = Owner ID (1-254)
              	;
              	; Returns nothing
              	; Uses: AF, BC, HL
0186:         	mem_free:
              		; Find location in memory
0186: 0600    		ld	b,0
0188: 4F      		ld	c,a
0189: 219D05  		ld	hl,alloc_bank_map
018C: 09      		add	hl,bc
              		
              		; Check owner
018D: 7E      		ld	a,(hl)
018E: BA      		cp	d
018F: C0      		ret	nz
              		
              		; Free bank
0190: 3EFF    		ld	a,0xFF
0192: 77      		ld	(hl),a
              		
              		; Increment banks free
0193: 219C05  		ld	hl,banks_free
0196: 34      		inc	(hl)
0197: C9      		ret
              		
              	; Free all banks by owner
              	; D = Owner ID (1-254)
              	;
              	; Returns nothing
              	; Uses: AF, BC, HL
0198:         	mem_free_all:
              		; Free a bank
0198: AF      		xor	a
0199: F5      	0$:	push	af
019A: CD8601  		call	mem_free
019D: F1      		pop	af
              		
              		; Next bank
019E: 3C      		inc	a
019F: F29901  		jp	p,0$
01A2: C9      		ret
              		
              	; Error out if empty
              	;
              	; Does not return
              	; Uses: N/A
01A3:         	mem_empty:
01A3: 11EE04  		ld	de,str_mem_empty
01A6: CD8C04  		call	cpm_print
01A9: C39F04  		jp	cpm_exit
              	
              	; -------------------------
              	; ******** Strings ********
              	; -------------------------
              	
              	.area	_DATA
              	
              	; Inital string that prints when the program is started
04C3:         	str_mem_init:
04C3: 494E4954		defb	'INITIALIZED MEMORY MAP',0x0A,0x0D
04C7: 49414C49	
04CB: 5A454420	
04CF: 4D454D4F	
04D3: 5259204D	
04D7: 41500A0D	
04DB: 42414E4B		defb	'BANK COUNT = '
04DF: 20434F55	
04E3: 4E54203D	
04E7: 20      	
04E8:         	str_mem_init_cnt:
04E8: 5858480A		defb	'XXH',0x0A,0x0D,'$'
04EC: 0D24    	
              		
04EE:         	str_mem_empty:
04EE: 494E5355		defb	'INSUFFICIENT MEMORY',0x0A,0x0D,'$'
04F2: 46464943	
04F6: 49454E54	
04FA: 204D454D	
04FE: 4F52590A	
0502: 0D24    	
              	
              	; ---------------------------
              	; ******** Variables ********
              	; ---------------------------
              	
              	.area	_BSS
              	
              	; Free bank count
059C:         	banks_free:
059C: 00      		defs	1
              	
              	; Allocated bank map
              	; This 128 byte table keeps track of every single 16K bank
              	; that exists on the ZMM. Populated on startup
059D:         	alloc_bank_map:
059D: 00000000		defs	128
05A1: 00...   	
              	#include "ZMM.asm"
              	;
              	;********************************************************************
              	;*
              	;*                  Z M M   M A N A G E M E N T
              	;* 
              	;*    These routines are used to manage the state of the ZMM.
              	;*    This includes the setting of the registers as well as setting
              	;*    up trap and interrupt stuff.
              	;*
              	;********************************************************************
              	
              	; ----------------------------
              	; ********  Functions ********
              	; ----------------------------
              	
              	.area	_TEXT
              	
              	; Initalize ZMM and reset registers
              	;
              	; Returns nothing
              	; Uses: AF
01AC:         	zmm_init:
              		; Zero out control register
01AC: 3E00    		ld	a,0
01AE: 321D06  		ld	(zmm_ctrl_state),a
01B1: 321E06  		ld	(zmm_bnk0_state),a
01B4: 321F06  		ld	(zmm_bnk1_state),a
01B7: 322006  		ld	(zmm_bnk2_state),a
01BA: 322106  		ld	(zmm_bnk3_state),a
              		
              		; See if we can swing in and out of virtual mode
01BD: CDCF01  		call	zmm_set_virt
01C0: CDDA01  		call	zmm_set_real
              		
              		; Tell the user that the ZMM is read
01C3: 110405  		ld	de,str_zmm_init
01C6: C38C04  		jp	cpm_print
              		
              	; Set the ZMM control register to the recorded state
              	; (zmm_ctrl_state) = New value of ZMM control register
              	;
              	; Returns nothing
              	; Uses: AF
01C9:         	zmm_ctrl_set:
01C9: 3A1D06  		ld	a,(zmm_ctrl_state)
01CC: D334    		out	(zmm_ctrl),a
01CE: C9      		ret
              		
              	; Go to virtual mode
              	;
              	; Returns nothing
              	; Uses: AF
01CF:         	zmm_set_virt:
01CF: 3A1D06  		ld	a,(zmm_ctrl_state)
01D2: F601    		or	0b00000001
01D4: 321D06  		ld	(zmm_ctrl_state),a
01D7: D334    		out	(zmm_ctrl),a
01D9: C9      		ret
              		
              	; Go to real mode
              	;
              	; Returns nothing
              	; Uses: AF
01DA:         	zmm_set_real:
01DA: 3A1D06  		ld	a,(zmm_ctrl_state)
01DD: E6FE    		and	0b11111110
01DF: 321D06  		ld	(zmm_ctrl_state),a
01E2: D334    		out	(zmm_ctrl),a
01E4: C9      		ret
              		
              	; Set program direction to "IN"
              	;
              	; Returns nothing
              	; Uses: AF
01E5:         	zmm_prgm_in:
01E5: 3A1D06  		ld	a,(zmm_ctrl_state)
01E8: F602    		or	0b00000010
01EA: 321D06  		ld	(zmm_ctrl_state),a
01ED: D334    		out	(zmm_ctrl),a
01EF: C9      		ret
              		
              	; Set program direction to "OUT"
              	;
              	; Returns nothing
              	; Uses: AF
01F0:         	zmm_prgm_out:
01F0: 3A1D06  		ld	a,(zmm_ctrl_state)
01F3: E6FD    		and	0b11111101
01F5: 321D06  		ld	(zmm_ctrl_state),a
01F8: D334    		out	(zmm_ctrl),a
01FA: C9      		ret
              		
              	; Turn on irq intercept mode
              	;
              	; Returns nothing
              	; Uses: AF
01FB:         	zmm_irq_inter:
01FB: 3A1D06  		ld	a,(zmm_ctrl_state)
01FE: F604    		or	0b00000100
0200: 321D06  		ld	(zmm_ctrl_state),a
0203: D334    		out	(zmm_ctrl),a
0205: C9      		ret
              		
              	; Turn off irq intercept mode
              	;
              	; Returns nothing
              	; Uses: AF
0206:         	zmm_irq_normal:
0206: 3A1D06  		ld	a,(zmm_ctrl_state)
0209: E6FB    		and	0b11111011
020B: 321D06  		ld	(zmm_ctrl_state),a
020E: D334    		out	(zmm_ctrl),a
0210: C9      		ret
              	
              	; Turn on force virtual irq
              	;
              	; Returns nothing
              	; Uses: AF
0211:         	zmm_irq_on:
0211: 3A1D06  		ld	a,(zmm_ctrl_state)
0214: F608    		or	0b00001000
0216: 321D06  		ld	(zmm_ctrl_state),a
0219: D334    		out	(zmm_ctrl),a
021B: C9      		ret
              		
              	; Turn off force virtual irq
              	;
              	; Returns nothing
              	; Uses: AF
021C:         	zmm_irq_off:
021C: 3A1D06  		ld	a,(zmm_ctrl_state)
021F: E6F7    		and	0b11110111
0221: 321D06  		ld	(zmm_ctrl_state),a
0224: D334    		out	(zmm_ctrl),a
0226: C9      		ret
              		
              	; Set bank 0
              	; A = Bank to set
              	;
              	; Returns nothing
              	; Uses: AF, B
0227:         	zmm_bnk0_set:
0227: 321E06  		ld	(zmm_bnk0_state),a
022A: D330    		out	(zmm_bnk0),a
022C: C9      		ret
              		
              	; Set bank 1
              	; A = Bank to set
              	;
              	; Returns nothing
              	; Uses:  AF, B
022D:         	zmm_bnk1_set:
022D: 321F06  		ld	(zmm_bnk1_state),a
0230: D331    		out	(zmm_bnk1),a
0232: C9      		ret
              		
              	; Set bank 2
              	; A = Bank to set
              	;
              	; Returns nothing
              	; Uses:  AF, B
0233:         	zmm_bnk2_set:
0233: 322006  		ld	(zmm_bnk2_state),a
0236: D332    		out	(zmm_bnk2),a
0238: C9      		ret
              		
              	; Set bank 3
              	; A = Bank to set
              	;
              	; Returns nothing
              	; Uses:  AF, B
0239:         	zmm_bnk3_set:
0239: 322106  		ld	(zmm_bnk3_state),a
023C: D333    		out	(zmm_bnk3),a
023E: C9      		ret
              		
              	; -------------------------
              	; ******** Strings ********
              	; -------------------------
              	
              	.area	_DATA
              	
              	; Inital string that prints when the program is started
0504:         	str_zmm_init:
0504: 494E4954		defb	'INITIALIZED ZMM',0x0A,0x0D,'$'
0508: 49414C49	
050C: 5A454420	
0510: 5A4D4D0A	
0514: 0D24    	
              		
              	; ---------------------------
              	; ******** Variables ********
              	; ---------------------------
              	
              	.area	_BSS
              	
              	; Reflected state of control register
061D:         	zmm_ctrl_state:
061D: 00      		defs	1
              		
              	; Bank 0 state
061E:         	zmm_bnk0_state:
061E: 00      		defs	1
              		
              	; Bank 1 state
061F:         	zmm_bnk1_state:
061F: 00      		defs	1
              		
              	; Bank 2 state
0620:         	zmm_bnk2_state:
0620: 00      		defs	1
              		
              	; Bank 3 state
0621:         	zmm_bnk3_state:
0621: 00      		defs	1
              		
              	#include "RESOURCE.asm"
              	;
              	;********************************************************************
              	;*
              	;*               R E S O U R C E   M A N A G E M E N T
              	;* 
              	;*    These routines handle obtaining use-supplied resources
              	;*    such as configurations, ROM images, and storage bindings.
              	;*    During startup, these resources will be loaded to build
              	;*    the virtual machine.
              	;*
              	;********************************************************************
              	
              	; -------------------------
              	; ******** Equates ********
              	; -------------------------
              	
0010:         	arg_size	equ 16
              	
              	; ----------------------------
              	; ********  Functions ********
              	; ----------------------------
              	
              	.area	_TEXT
              	
              	; Initalize resources
              	;
              	; Returns nothing
              	; Uses: AF, BC, HL
023F:         	res_init:
              		; Start by zero-terminating string
023F: 218000  		ld	hl,cpm_command
0242: 4E      		ld	c,(hl)
0243: 0600    		ld	b,0
0245: 09      		add	hl,bc
0246: 23      		inc	hl
0247: 70      		ld	(hl),b
              		
0248: C9      		ret
              		
              	; Loads an open resource into a bankmap
              	; Bankmap will be zero-padded to fill requested number of records
              	; HL = Address of bankmap
              	; BC = Number of records (128 byte blocks) to load
              	;
              	; Returns nothing
              	; Uses: all
0249:         	res_load:
              		; Set read flag
0249: 3EFF    		ld	a,0xFF
024B: 32C606  		ld	(res_do_read),a
              	
              		; Save args
024E: 22C706  		ld	(res_bankmap),hl
0251: ED43C406		ld	(res_sectors),bc
              	
              		; Virtual mode should be off while we do this
0255: 3A1D06  		ld	a,(zmm_ctrl_state)
0258: F5      		push	af
0259: CDDA01  		call	zmm_set_real
              		
              		; Do function call
025C: CD6B02  		call	0$
              		
              		; Reset bank 3
025F: 3A2106  		ld	a,(zmm_bnk3_state)
0262: D333    		out	(zmm_bnk3),a
              		
              		; Restore register
0264: F1      		pop	af
0265: 321D06  		ld	(zmm_ctrl_state),a
0268: C3C901  		jp	zmm_ctrl_set
              		
              		; Allocate a new bank
026B: CD6501  	0$:	call	mem_alloc
026E: 2AC706  		ld	hl,(res_bankmap)
0271: 77      		ld	(hl),a
0272: 23      		inc	hl
0273: 22C706  		ld	(res_bankmap),hl
              		
              		; Set the bank in slot 3
0276: D333    		out	(zmm_bnk3),a
              		
              		; Set DMA address
0278: 114406  		ld	de,res_buffer
027B: 0E1A    		ld	c,bios_set_dma
027D: CD0500  		call	bdos
              		
              		; Set pointer	
0280: 2100C0  		ld	hl,zmm_top
0283: 22C906  		ld	(res_pointer),hl
              		
              		; We will be loading up to 128 records at a time here
0286: 0680    		ld	b,128
              		
              		; Do read operation
0288: C5      	1$:	push	bc
0289: 11CB06  		ld	de,res_fcb
028C: 0E14    		ld	c,bdos_read
028E: 3AC606  		ld	a,(res_do_read)
0291: B7      		or	a
0292: C40500  		call	nz,bdos
              		
              		; Check file I/O result
0295: B7      		or	a
0296: C4BF02  		call	nz,50$
              		
              		; Go to virtual mode
0299: CDCF01  		call	zmm_set_virt
              		
              		; Copy record to bank
029C: 214406  		ld	hl,res_buffer
029F: ED5BC906		ld	de,(res_pointer)
02A3: 018000  		ld	bc,128
02A6: EDB0    		ldir
02A8: ED53C906		ld	(res_pointer),de
              		
              		; Back to real mode
02AC: CDDA01  		call	zmm_set_real 
              		
              		; Get BC back to restore sector counter
02AF: C1      		pop	bc
              		
              		; Decrement record count
02B0: 2AC406  		ld	hl,(res_sectors)
02B3: 2B      		dec	hl
02B4: 22C406  		ld	(res_sectors),hl
02B7: 7C      		ld	a,h
02B8: B5      		or	l
02B9: C8      		ret	z
              		
              		; Go get another sector
02BA: 10CC    		djnz	1$
02BC: C36B02  		jp	0$
              	
              		; Zero buffer and reset read flag
02BF: AF      	50$:	xor	a
02C0: 32C606  		ld	(res_do_read),a
              		
02C3: 214406  		ld	hl,res_buffer
02C6: 114506  		ld	de,res_buffer+1
02C9: 017F00  		ld	bc,128-1
02CC: 77      		ld	(hl),a
02CD: EDB0    		ldir
              	
02CF: C9      		ret
              		
              	; Opens a file based on the resource argument
              	; If the file cannot be opened, an error will be thrown
              	; (res_argument) = File to open
              	;
              	; Returns nothing
              	; Uses: all
02D0:         	res_open:
              		; Virtual mode should be off while we do this
02D0: 3A1D06  		ld	a,(zmm_ctrl_state)
02D3: F5      		push	af
02D4: CDDA01  		call	zmm_set_real
              		
              		; Do function call
02D7: CDE102  		call	0$
              		
              		; Restore register
02DA: F1      		pop	af
02DB: 321D06  		ld	(zmm_ctrl_state),a
02DE: C3C901  		jp	zmm_ctrl_set
              		
              		; Let the user know we are loading stuff
02E1: 0E09    	0$:	ld	c,bdos_print
02E3: 111605  		ld	de,str_load_a
02E6: CD0500  		call	bdos
              		
              		; Print resource name
02E9: 213306  		ld	hl,res_current
02EC: 5E      		ld	e,(hl)
02ED: 23      		inc	hl
02EE: 56      		ld	d,(hl)
02EF: CDB503  		call	res_printzt
              		
              		; Next string
02F2: 0E09    		ld	c,bdos_print
02F4: 111F05  		ld	de,str_load_b
02F7: CD0500  		call	bdos
              		
              		; Print file name
02FA: 112206  		ld	de,res_argument
02FD: CDB503  		call	res_printzt
              		
              		; CRLF
0300: 0E09    		ld	c,bdos_print
0302: 119905  		ld	de,str_crlf
0305: CD0500  		call	bdos
              		
              		; Detect if there is an argument
0308: 3A2206  		ld	a,(res_argument)
030B: B7      		or	a
030C: C21A03  		jp	nz,1$
              		
              		; No argument, error!
030F: 0E09    		ld	c,bdos_print
0311: 112605  		ld	de,str_arg_empty
0314: CD0500  		call	bdos
0317: C39F04  		jp	cpm_exit
              	
              		; Reset fields
031A: AF      	1$:	xor	a
031B: 21CB06  		ld	hl,res_fcb
031E: 11CC06  		ld	de,res_fcb+1
0321: 012300  		ld	bc ,36-1
0324: 77      		ld	(hl),a
0325: EDB0    		ldir
              		
0327: 3E20    		ld	a,0x20
0329: 21CC06  		ld	hl,res_fcb_name
032C: 11CD06  		ld	de,res_fcb_name+1
032F: 010A00  		ld	bc ,11-1
0332: 77      		ld	(hl),a
0333: EDB0    		ldir
              	
              		; Is there a prefix?
0335: 212206  		ld	hl,res_argument
0338: 3A2306  		ld	a,(res_argument+1)
033B: FE3A    		cp	':'
033D: C24F03  		jp	nz,2$
              		
              		; Set prefix
0340: 3A2206  		ld	a,(res_argument)
0343: D640    		sub	'A'-1
0345: FE11    		cp	17
0347: D2AA03  		jp	nc,99$
034A: 32CB06  		ld	(res_fcb_drive),a
034D: 23      		inc	hl
034E: 23      		inc	hl
              	
              		; HL = Proper filename start
034F: 0608    	2$:	ld	b,8
0351: 11CC06  		ld	de,res_fcb_name
              		
              		; Copy it over
0354: 7E      	3$:	ld	a,(hl)
0355: B7      		or	a
0356: CAAA03  		jp	z,99$
0359: FE2A    		cp	'*'
035B: CA6B03  		jp	z,4$
035E: FE2E    		cp	'.'
0360: CA7203  		jp	z,5$
0363: 12      		ld	(de),a
0364: 13      		inc	de
0365: 23      		inc	hl
0366: 10EC    		djnz	3$
0368: C37203  		jp	5$
              	
              		; Fill remains of FCB file name
036B: 3E3F    	4$:	ld	a,'?'
036D: 12      		ld	(de),a
036E: 13      		inc	de
036F: 10FA    		djnz	4$
0371: 23      		inc	hl
              	
              		; We should either see a '.' or a null character
0372: 7E      	5$:	ld	a,(hl)
0373: B7      		or	a
0374: CA9B03  		jp	z,8$
0377: FE2E    		cp	'.'
0379: C2AA03  		jp	nz,99$
037C: 23      		inc	hl
              		
              		; Fill in extension
037D: 0603    		ld	b,3
037F: 11D406  		ld	de,res_fcb_type
              		
              		; Copy it over
0382: 7E      	6$:	ld	a,(hl)
0383: B7      		or	a
0384: CA9B03  		jp	z,8$
0387: FE2A    		cp	'*'
0389: CA9403  		jp	z,7$
038C: 12      		ld	(de),a
038D: 13      		inc	de
038E: 23      		inc	hl
038F: 10F1    		djnz	6$
0391: C39B03  		jp	8$
              		
              		; Fill remains of FCB file extension
0394: 3E3F    	7$:	ld	a,'?'
0396: 12      		ld	(de),a
0397: 13      		inc	de
0398: 10D1    		djnz	4$
039A: 23      		inc	hl
              	
              		; We should get a zero
039B: 7E      	8$:	ld 	a,(hl)
039C: B7      		or	a
039D: C2AA03  		jp	nz,99$
              		
              		; It is filled in, attempt to open
03A0: 0E0F    		ld	c,bdos_open
03A2: 11CB06  		ld	de,res_fcb
03A5: CD0500  		call	bdos
              		
              		; Check error
03A8: 3C      		inc	a
03A9: C0      		ret	nz
              		
              		; Error!
03AA: 0E09    	99$:	ld	c,bdos_print
03AC: 113D05  		ld	de,str_arg_fail
03AF: CD0500  		call	bdos
03B2: C39F04  		jp	cpm_exit
              		
              		
              	; Print a zero terminated string
              	; We should be in real mode for this
              	; DE = String
              	;
              	; Returns nothing
              	; Uses: All
03B5:         	res_printzt:
03B5: 1A      	0$:	ld	a,(de)
03B6: B7      		or	a
03B7: C8      		ret	z
              		
              		; Print character
03B8: D5      		push	de
03B9: 5F      		ld	e,a
03BA: 0E02    		ld	c,bdos_con_out
03BC: CD0500  		call	bdos
03BF: D1      		pop	de
03C0: 13      		inc	de
03C1: C3B503  		jp	0$
              	
              	; Find a resource from the command line
              	; If the resource is found, the contents will be cached in memory
              	; DE = Name of resource (upper case only) 
              	;
              	; Returns A = 0xFF if no resource is found
              	; Uses: AF, BC, DE, HL
03C4:         	res_locate:
              		; Save resource
03C4: ED533306		ld	(res_current),de
              	
              		; Travel to the start of arguments
03C8: 218100  		ld	hl,cpm_command+1
03CB: 7E      	0$:	ld	a,(hl)
03CC: B7      		or	a
03CD: CA2A04  		jp	z,99$
03D0: FE21    		cp	0x21
03D2: D2D903  		jp	nc,1$
03D5: 23      		inc	hl
03D6: C3CB03  		jp	0$
              		
              		; Found an argument
              		; Check it against the contents of (DE)
              		; Also must start with '-'
03D9: FE2D    	1$:	cp	'-'
03DB: C2EC03  		jp	nz,3$
03DE: 23      		inc	hl
03DF: D5      		push	de
03E0: 1A      	2$:	ld	a,(de)
              		
              		; Check if at end of string
03E1: B7      		or	a
03E2: CAFA03  		jp	z,4$
              		
              		; No? Well lets see if (de) = (hl)
03E5: BE      		cp	(hl)
03E6: 23      		inc	hl
03E7: 13      		inc	de
03E8: CAE003  		jp	z,2$
              		
              		; Strings are different!
              		; Escape from the current argument and continue
03EB: D1      		pop	de
03EC: 7E      	3$:	ld	a,(hl)
03ED: B7      		or	a
03EE: CA2A04  		jp	z,99$
03F1: FE21    		cp	0x21
03F3: DACB03  		jp	c,0$
03F6: 23      		inc	hl
03F7: C3EC03  		jp	3$
              	
              		; Make sure we are at the end of the argument as well
03FA: D1      	4$: 	pop	de
03FB: 7E      		ld	a,(hl)
03FC: FE21    		cp	0x21
03FE: D2EC03  		jp	nc,3$
              		
              		; Ok, lets copy the argument into memory if it exists
0401: 112206  		ld	de,res_argument
0404: AF      		xor	a
0405: 12      		ld	(de),a
              		
              		; Travel to the start of the argument
0406: 7E      	5$:	ld	a,(hl)
0407: B7      		or	a
0408: CA2804  		jp	z,89$
040B: FE21    		cp	0x21
040D: D21404  		jp	nc,6$
0410: 23      		inc	hl
0411: C30604  		jp	5$
              	
              		; Make sure it doesn't start with '-'
0414: FE2D    	6$:	cp	'-'
0416: CA2804  		jp	z,89$
              		
              		; Ok, lets copy up 16 bytes of this
0419: 0610    		ld	b,arg_size
041B: 7E      	7$:	ld	a,(hl)
041C: FE21    		cp	0x21
041E: DA2604  		jp	c,8$
0421: 12      		ld	(de),a
0422: 23      		inc	hl
0423: 13      		inc	de
0424: 10F5    		djnz	7$
              	
              		; Zero terminate
0426: AF      	8$:	xor	a
0427: 12      		ld	(de),a
              		
              		; Good ending
0428: AF      	89$:	xor	a
0429: C9      		ret
              	
              		; Bad ending
042A: 3EFF    	99$:	ld	a,0xFF
042C: C9      		ret
              		
              	; -------------------------
              	; ******** Strings ********
              	; -------------------------
              	
              	.area	_DATA
              	
              	; Loading string components
0516:         	str_load_a:
0516: 4C4F4144		defb	'LOADING $'
051A: 494E4720	
051E: 24      	
              		
051F:         	str_load_b:
051F: 2046524F		defb	' FROM $'
0523: 4D2024  	
              		
              	; Error messages
0526:         	str_arg_empty:
0526: 4E4F2041		defb	'NO ARGUMENT PROVIDED',0x0A,0x0D,'$'
052A: 5247554D	
052E: 454E5420	
0532: 50524F56	
0536: 49444544	
053A: 0A0D24  	
              		
053D:         	str_arg_fail:
053D: 4641494C		defb	'FAILED TO OPEN FILE',0x0A,0x0D,'$'
0541: 45442054	
0545: 4F204F50	
0549: 454E2046	
054D: 494C450A	
0551: 0D24    	
              		
              	; ---------------------------
              	; ******** Variables ********
              	; ---------------------------
              	
              	.area	_BSS
              	
              	; Stores a zero-terminated string for the resource argument
0622:         	res_argument:
0622: 00000000		defs	arg_size+1
0626: 00...   	
              		
              	; Current resource being accessed
0633:         	res_current:
0633: 00000000		defs	arg_size+1
0637: 00...   	
              		
              	; Resource buffer
0644:         	res_buffer:
0644: 00000000		defs	128
0648: 00...   	
              		
              	; Sector counter
06C4:         	res_sectors:
06C4: 0000    		defs	2
              		
              	; Do we need to read?
06C6:         	res_do_read:
06C6: 00      		defs	1
              		
              	; Resource bankmap
06C7:         	res_bankmap:
06C7: 0000    		defs	2
              		
              	; Loading pointer
06C9:         	res_pointer:
06C9: 0000    		defs	2
              		
              	; File control block for use in loading resources
06CB:         	res_fcb:
06CB: 00000000		defs	36
06CF: 00...   	
06CB:         	res_fcb_drive	equ	res_fcb
06CC:         	res_fcb_name	equ	res_fcb+1
06D4:         	res_fcb_type	equ	res_fcb+9
06D7:         	res_fcb_ex	equ	res_fcb+12
06D8:         	res_fcb_s1	equ	res_fcb+13
06D9:         	res_fcb_s2	equ	res_fcb+14
06DA:         	res_fcb_rc	equ	res_fcb+15
06DB:         	res_fcb_data	equ	res_fcb+16
06EB:         	res_fcb_cr	equ	res_fcb+32
06EC:         	res_fcb_r0	equ	res_fcb+33
06ED:         	res_fcb_r1	equ	res_fcb+34
06EE:         	res_fcb_r2	equ	res_fcb+35
              	#include "TRAP.asm"
              	;
              	;********************************************************************
              	;*
              	;*                     T R A P   H A N D L E R
              	;* 
              	;*    Responsible for handling various traps from the ZMM. Both
              	;*    interrupt and I/O traps will be pre-processed before being
              	;*    sent to the virtualization core for device-specific handling
              	;*
              	;********************************************************************
              	
              	; -------------------------------
              	; ********  Trap Handler ********
              	; -------------------------------
              	
              	.area	_TEXT
              	
              	; Entry point for traps
042D:         	trap_entry:
              		; Save value of SP
042D: ED73EF06		ld	(trap_sp_value),sp
0431: 310070  		ld	sp,kri_stack
              		
              		; Save value of AF
0434: F5      		push	af
              		
              		; Check in on device interrupts
0435: CDBE04  		call	irq_handle
              		
              		; Grab the value of the ISR register
0438: DB30    		in	a,(zmm_isr)
              		
              		; Do we actually need to handle a trap?
043A: B7      		or	a
043B: F25A04  		jp	p,trap_continue
              		
              		; OK, a trap did occur.
              		; Are we doing "classic" I/O or extended I/O?
043E: FEE8    		cp	0b11101000
0440: DA5A04  		jp	c,trap_io_ext
              		
              		; In or out?
0443: FEEC    		cp	0b11101100
0445: DA5104  		jp	c,0$
              		
              		; In it is
0448: CDBF04  		call	in_handle
044B: 32FF6F  		ld	(trap_a_value),a
044E: C35A04  		jp	trap_continue
              		
              		; Out it is
0451: 3AFF6F  	0$:	ld	a,(trap_a_value)
0454: CDC204  		call	out_handle
0457: C35A04  		jp	trap_continue
              		
              		
              		
              		
              		
              		
              		
              	; It's an extended I/O instruction
045A:         	trap_io_ext:
              		
              		
              		
              		; If the number is even, then it will ALWAYS be an out instruction
              		
              	; Continue execution
045A:         	trap_continue:
              		; Restore AF
045A: F1      		pop	af
              		
              		; Restore old SP
045B: ED7BEF06		ld	sp,(trap_sp_value)
              		
              		; Go back to the virtual machine
045F: ED45    		retn
              		
              	; ----------------------------
              	; ********  Functions ********
              	; ----------------------------
              	
              	.area	_TEXT
              	
              	; Initalize trap handling stuff
              	;
              	; Returns nothing
              	; Uses: AF, HL
0461:         	trap_init:
              		; Install trap vector
0461: 3EC3    		ld	a,0xC3
0463: 326600  		ld	(nmi_address),a
0466: 212D04  		ld	hl,trap_entry
0469: 226700  		ld	(nmi_vector),hl
              		
046C: C9      		ret
              		
              		
              	
              	; ---------------------------
              	; ******** Variables ********
              	; ---------------------------
              	
              	.area	_BSS
              	
              	; Value of untrapped SP value
06EF:         	trap_sp_value:
06EF: 0000    		defs	2
              	
              	; --------------------------------
              	; ******** KRISYS Startup ********
              	; --------------------------------
              	
              	.area	_TEXT
              		
              		; KRISYS entry point
046D:         	kri_start:	
              		; Set up stack
046D: F3      		di
046E: 310070  		ld	sp,kri_stack
0471: 219F04  		ld	hl,cpm_exit
0474: E5      		push	hl
              		
              		; Print "hello" splash
0475: 0E09    		ld	c,bdos_print
0477: 115305  		ld	de,str_splash
047A: CD0500  		call	bdos
              		
              		; Initalize subcomponents
047D: CDAC01  		call	zmm_init
0480: CD6104  		call	trap_init
0483: CD0301  		call	mem_map_init
0486: CD3F02  		call	res_init
              		
              		
              		; Start the core
0489: C3BB04  		jp	core_start
              		
              	; ------------------------------
              	; ******** CP/M Service ********
              	; ------------------------------
              		
              	; Print something to the CP/M console
              	; DE = Address of string to print
              	;
              	; Returns nothing
              	; Uses: All
048C:         	cpm_print:
              		; Save control register state
048C: 3A1D06  		ld	a,(zmm_ctrl_state)
048F: F5      		push	af
              		
              		; Go to real mode
0490: CDDA01  		call zmm_set_real
              		
              		; Do BDOS call
0493: 0E09    		ld	c,bdos_print
0495: CD0500  		call	bdos
              		
              		; Restore register
0498: F1      		pop	af
0499: 321D06  		ld	(zmm_ctrl_state),a
049C: C3C901  		jp	zmm_ctrl_set
              		
              	; Go back to CP/M
              	;
              	; Does not return
              	; Uses: N/A
049F:         	cpm_exit:
049F: 0E00    		ld	c,bdos_exit
04A1: CD0500  		call	bdos	
              		
              	; ----------------------
              	; ******** Misc ********
              	; ----------------------
              		
              	; Converts the value into an 8 bit hex number
              	; A = Number to convert
              	;
              	; Returns DE = result
              	; Uses: AF, DE
04A4: 57      	tohex:	ld	d,a
04A5: CDAF04  		call	0$
04A8: 5F      		ld	e,a
04A9: 7A      		ld	a,d
04AA: CDB304  		call	1$
04AD: 57      		ld	d,a
04AE: C9      		ret
              		
04AF: 1F      	0$:	rra
04B0: 1F      		rra
04B1: 1F      		rra
04B2: 1F      		rra
04B3: F6F0    	1$:	or	0xF0
04B5: 27      		daa
04B6: C6A0    		add	a,0xA0
04B8: CE40    		adc	a,0x40
04BA: C9      		ret
              	
              	; -------------------------
              	; ******** Strings ********
              	; -------------------------
              	
              	.area	_DATA
              	
              	; Inital string that prints when the program is started
0553:         	str_splash:
0553: 4944454E		defb	'IDENTITY KRISYS HYPERVISOR, CP/M EDT.',0x0A,0x0D
0557: 54495459	
055B: 204B5249	
055F: 53595320	
0563: 48595045	
0567: 52564953	
056B: 4F522C20	
056F: 43502F4D	
0573: 20454454	
0577: 2E0A0D  	
057A: 5645522E		defb	'VER. 0.0.1, GAVIN TERSTEEG 2024'
057E: 20302E30	
0582: 2E312C20	
0586: 47415649	
058A: 4E205445	
058E: 52535445	
0592: 45472032	
0596: 303234  	
              		
              	; Carriage return, line break
0599:         	str_crlf:
0599: 0A0D24  		defb	0x0A,0x0D,'$' 
              		
              	
              	; ---------------------------
              	; ******** Core Init ********
              	; ---------------------------
              	
              	.area	_TEXT
              	
              	; Start of ColecoVision core
04BB:         	core_start:
04BB: C39F04  		jp	cpm_exit
              	
              	
              	; -----------------------------------
              	; ******** Interrupt Handler ********
              	; -----------------------------------
              	
              	.area	_TEXT
              		
              	; Handle "real" interrupts from devices (if needed)
              	; All registers except AF must remain unchanged!
04BE:         	irq_handle:
04BE: C9      		ret
              		
              	
              	; -----------------------------
              	; ******** I/O Handler ********
              	; -----------------------------
              		
              	.area	_TEXT
              	
              	; Handle an IN instruction
              	; Inputted value should be returned in register A
              	; All registers except AF must remain unchanged!
04BF:         	in_handle:
04BF: 3EFF    		ld	a,0xFF
04C1: C9      		ret
              	
              	; Handle an OUT instruction
              	; A = Value outputted by virtual machine
              	; All registers except AF must remain unchanged!
04C2:         	out_handle:
04C2: C9      		ret


; +++ segments +++

#CODE _TEXT    = $0100 =   256,  size = $03C3 =   963
#CODE _DATA    = $04C3 =  1219,  size = $00D9 =   217
#DATA _BSS     = $059C =  1436,  size = $0155 =   341

; +++ global symbols +++

_BSS             = $059C =  1436  _BSS    KRISYS.asm:28 (unused)
_BSS_end         = $06F1 =  1777  _BSS    KRISYS.asm:28
_BSS_size        = $0155 =   341  _BSS    KRISYS.asm:28 (unused)
_DATA            = $04C3 =  1219  _DATA   KRISYS.asm:27 (unused)
_DATA_end        = $059C =  1436  _DATA   KRISYS.asm:27
_DATA_size       = $00D9 =   217  _DATA   KRISYS.asm:27 (unused)
_TEXT            = $0100 =   256  _TEXT   KRISYS.asm:26 (unused)
_TEXT_end        = $04C3 =  1219  _TEXT   KRISYS.asm:26
_TEXT_size       = $03C3 =   963  _TEXT   KRISYS.asm:26 (unused)
alloc_bank_map   = $059D =  1437  _BSS    MEMORY.asm:211
arg_size         = $0010 =    16  _BSS    RESOURCE.asm:17
banks_free       = $059C =  1436  _BSS    MEMORY.asm:205
bdos             = $0005 =     5  _TEXT   KRISYS.asm:49
bdos_con_in      = $0001 =     1  _TEXT   KRISYS.asm:51 (unused)
bdos_con_out     = $0002 =     2  _TEXT   KRISYS.asm:52
bdos_exit        = $0000 =     0  _TEXT   KRISYS.asm:50
bdos_open        = $000F =    15  _TEXT   KRISYS.asm:54
bdos_print       = $0009 =     9  _TEXT   KRISYS.asm:53
bdos_read        = $0014 =    20  _TEXT   KRISYS.asm:55
bios_set_dma     = $001A =    26  _TEXT   KRISYS.asm:56
core_start       = $04BB =  1211  _TEXT   KCOLECO.asm:17
cpm_command      = $0080 =   128  _TEXT   KRISYS.asm:58
cpm_exit         = $049F =  1183  _TEXT   KRISYS.asm:160
cpm_print        = $048C =  1164  _TEXT   KRISYS.asm:139
in_handle        = $04BF =  1215  _TEXT   KCOLECO.asm:42
irq_handle       = $04BE =  1214  _TEXT   KCOLECO.asm:29
kri_stack        = $7000 = 28672  _TEXT   KRISYS.asm:88
kri_start        = $046D =  1133  _TEXT   KRISYS.asm:108
mem_alloc        = $0165 =   357  _TEXT   MEMORY.asm:103
mem_empty        = $01A3 =   419  _TEXT   MEMORY.asm:177
mem_free         = $0186 =   390  _TEXT   MEMORY.asm:135
mem_free_all     = $0198 =   408  _TEXT   MEMORY.asm:161 (unused)
mem_map_init     = $0103 =   259  _TEXT   MEMORY.asm:30
nabu_at_latch    = $0041 =    65  _TEXT   KRISYS.asm:85 (unused)
nabu_ay_data     = $0040 =    64  _TEXT   KRISYS.asm:84 (unused)
nabu_nctl        = $0000 =     0  _TEXT   KRISYS.asm:83 (unused)
nmi_address      = $0066 =   102  _TEXT   KRISYS.asm:79
nmi_vector       = $0067 =   103  _TEXT   KRISYS.asm:80
out_handle       = $04C2 =  1218  _TEXT   KCOLECO.asm:49
res_argument     = $0622 =  1570  _BSS    RESOURCE.asm:454
res_bankmap      = $06C7 =  1735  _BSS    RESOURCE.asm:474
res_buffer       = $0644 =  1604  _BSS    RESOURCE.asm:462
res_current      = $0633 =  1587  _BSS    RESOURCE.asm:458
res_do_read      = $06C6 =  1734  _BSS    RESOURCE.asm:470
res_fcb          = $06CB =  1739  _BSS    RESOURCE.asm:482
res_fcb_cr       = $06EB =  1771  _BSS    RESOURCE.asm:492 (unused)
res_fcb_data     = $06DB =  1755  _BSS    RESOURCE.asm:491 (unused)
res_fcb_drive    = $06CB =  1739  _BSS    RESOURCE.asm:484
res_fcb_ex       = $06D7 =  1751  _BSS    RESOURCE.asm:487 (unused)
res_fcb_name     = $06CC =  1740  _BSS    RESOURCE.asm:485
res_fcb_r0       = $06EC =  1772  _BSS    RESOURCE.asm:493 (unused)
res_fcb_r1       = $06ED =  1773  _BSS    RESOURCE.asm:494 (unused)
res_fcb_r2       = $06EE =  1774  _BSS    RESOURCE.asm:495 (unused)
res_fcb_rc       = $06DA =  1754  _BSS    RESOURCE.asm:490 (unused)
res_fcb_s1       = $06D8 =  1752  _BSS    RESOURCE.asm:488 (unused)
res_fcb_s2       = $06D9 =  1753  _BSS    RESOURCE.asm:489 (unused)
res_fcb_type     = $06D4 =  1748  _BSS    RESOURCE.asm:486
res_init         = $023F =   575  _TEXT   RESOURCE.asm:29
res_load         = $0249 =   585  _TEXT   RESOURCE.asm:47 (unused)
res_locate       = $03C4 =   964  _TEXT   RESOURCE.asm:337 (unused)
res_open         = $02D0 =   720  _TEXT   RESOURCE.asm:153 (unused)
res_pointer      = $06C9 =  1737  _BSS    RESOURCE.asm:478
res_printzt      = $03B5 =   949  _TEXT   RESOURCE.asm:317
res_sectors      = $06C4 =  1732  _BSS    RESOURCE.asm:466
stack_size       = $0020 =    32          KRISYS.asm:31
str_arg_empty    = $0526 =  1318  _DATA   RESOURCE.asm:441
str_arg_fail     = $053D =  1341  _DATA   RESOURCE.asm:444
str_crlf         = $0599 =  1433  _DATA   KRISYS.asm:203
str_load_a       = $0516 =  1302  _DATA   RESOURCE.asm:434
str_load_b       = $051F =  1311  _DATA   RESOURCE.asm:437
str_mem_empty    = $04EE =  1262  _DATA   MEMORY.asm:195
str_mem_init     = $04C3 =  1219  _DATA   MEMORY.asm:189
str_mem_init_cnt = $04E8 =  1256  _DATA   MEMORY.asm:192
str_splash       = $0553 =  1363  _DATA   KRISYS.asm:198
str_zmm_init     = $0504 =  1284  _DATA   ZMM.asm:184
tohex            = $04A4 =  1188  _TEXT   KRISYS.asm:173
trap_a_value     = $6FFF = 28671  _TEXT   KRISYS.asm:89
trap_continue    = $045A =  1114  _TEXT   TRAP.asm:70
trap_entry       = $042D =  1069  _TEXT   TRAP.asm:19
trap_f_value     = $6FFE = 28670  _TEXT   KRISYS.asm:90 (unused)
trap_init        = $0461 =  1121  _TEXT   TRAP.asm:90
trap_io_ext      = $045A =  1114  _TEXT   TRAP.asm:63
trap_sp_value    = $06EF =  1775  _BSS    TRAP.asm:108
zmm_addr_hi      = $0032 =    50  _TEXT   KRISYS.asm:67 (unused)
zmm_addr_lo      = $0033 =    51  _TEXT   KRISYS.asm:68 (unused)
zmm_bnk0         = $0030 =    48  _TEXT   KRISYS.asm:61
zmm_bnk0_set     = $0227 =   551  _TEXT   ZMM.asm:142 (unused)
zmm_bnk0_state   = $061E =  1566  _BSS    ZMM.asm:198
zmm_bnk1         = $0031 =    49  _TEXT   KRISYS.asm:62
zmm_bnk1_set     = $022D =   557  _TEXT   ZMM.asm:152 (unused)
zmm_bnk1_state   = $061F =  1567  _BSS    ZMM.asm:202
zmm_bnk2         = $0032 =    50  _TEXT   KRISYS.asm:63
zmm_bnk2_set     = $0233 =   563  _TEXT   ZMM.asm:162 (unused)
zmm_bnk2_state   = $0620 =  1568  _BSS    ZMM.asm:206
zmm_bnk3         = $0033 =    51  _TEXT   KRISYS.asm:64
zmm_bnk3_set     = $0239 =   569  _TEXT   ZMM.asm:172
zmm_bnk3_state   = $0621 =  1569  _BSS    ZMM.asm:210
zmm_capt_res     = $007F =   127  _TEXT   KRISYS.asm:76 (unused)
zmm_capt_set     = $0070 =   112  _TEXT   KRISYS.asm:75 (unused)
zmm_capture      = $7000 = 28672  _TEXT   KRISYS.asm:71
zmm_ctrl         = $0034 =    52  _TEXT   KRISYS.asm:65
zmm_ctrl_set     = $01C9 =   457  _TEXT   ZMM.asm:44
zmm_ctrl_state   = $061D =  1565  _BSS    ZMM.asm:194
zmm_init         = $01AC =   428  _TEXT   ZMM.asm:22
zmm_irq_inter    = $01FB =   507  _TEXT   ZMM.asm:97 (unused)
zmm_irq_normal   = $0206 =   518  _TEXT   ZMM.asm:108 (unused)
zmm_irq_off      = $021C =   540  _TEXT   ZMM.asm:130 (unused)
zmm_irq_on       = $0211 =   529  _TEXT   ZMM.asm:119 (unused)
zmm_isr          = $0030 =    48  _TEXT   KRISYS.asm:66
zmm_map          = $8000 = 32768  _TEXT   KRISYS.asm:72 (unused)
zmm_prgm_in      = $01E5 =   485  _TEXT   ZMM.asm:75 (unused)
zmm_prgm_out     = $01F0 =   496  _TEXT   ZMM.asm:86 (unused)
zmm_set_real     = $01DA =   474  _TEXT   ZMM.asm:64
zmm_set_virt     = $01CF =   463  _TEXT   ZMM.asm:53
zmm_top          = $C000 = 49152  _TEXT   KRISYS.asm:73
zmm_trap         = $0037 =    55  _TEXT   KRISYS.asm:69 (unused)


total time: 0.4641 sec.
no errors
