              	; --------------------------------------
              	; zasm: assemble "KCOLECO.asm"
              	; date: 2024-08-11 23:47:42
              	; --------------------------------------


              	;
              	;********************************************************************
              	;*
              	;*        K R I S Y S   C O L E C O V I S I O N   C O R E
              	;*
              	;********************************************************************
              	
              	#include "KRISYS.asm"
              	;
              	;********************************************************************
              	;*
              	;*              I D E N T I T Y   K R I S Y S
              	;*
              	;*      The [K]lunkly [R]emapper / [I]nterpreter [SYS]tem
              	;*
              	;*             Written by Gavin Tersteeg, 2024
              	;*              Copyleft, All Wrongs Reserved
              	;*
              	;*
              	;*   This piece of software allows different classic Z80 systems
              	;*   to run as "virtual machines" on top of existing hardware by
              	;*   use of a ZMM (Z80 MEGAMAPPER). It does this by remapping RAM
              	;*   and I/O address space ot match that of it's target system.
              	;*   Anything that can't be emulated by simple remapping is instead
              	;*   interpreted using I/O traps. 
              	;*
              	;*   This allows virtualized machines to run with an acceptable
              	;*   degree of speed and accuracy. While the ZMM is still quite
              	;*   limited in what sort of hardware can be efficiently virtualized,
              	;*   anything that avoids MMIO or graphics hardware that isn't a VDP
              	;*   generally can be made to work.
              	;* 
              	;********************************************************************
              		
              	; ----------------------------
              	; ******** ZASM Setup ********
              	; ----------------------------
              	
0032:         	stack_size = 0x32
              	
              	#target BIN
0100:         	#code	_TEXT,0x0100	; Setup to run as a CP/M executable
022B:         	#code	_DATA,_TEXT_end
02C7:         	#data	_BSS,_DATA_end
              	
              	; Make sure w don't overrun available memory
              	#assert	_BSS_end < (zmm_capture-stack_size)
              	
              	.area	_TEXT
0100: C3E301  		jp	start
              	
              	; -------------------------
              	; ******** Equates ********
              	; -------------------------
              	
              	; CP/M Stuff
0005:         	bdos		equ	0x0005
0000:         	bdos_exit	equ	0x00
0001:         	bdos_con_in	equ	0x01
0002:         	bdos_con_out	equ	0x02
0009:         	bdos_print	equ	0x09
              	
              	; Z80 MEGAMAPPER Stuff
0030:         	zmm_bank_0	equ	0x30	; 16K Bank 0 (0x0000 - 0x3FFF)
0031:         	zmm_bank_1	equ	0x31	; 16K Bank 1 (0x4000 - 0x7FFF)
0032:         	zmm_bank_2	equ	0x32	; 16K Bank 2 (0x8000 - 0xBFFF)
0033:         	zmm_bank_3	equ	0x33	; 16K Bank 3 (0xC000 - 0xFFFF)
0034:         	zmm_ctrl	equ	0x34	; ZMM Control Register
0030:         	zmm_isr		equ	0x30	; ZMM Trapped Instruction Register
0032:         	zmm_addr_hi	equ	0x32	; ZMM Trap Address High
0033:         	zmm_addr_lo	equ	0x33	; ZMM Trap Address Low
0037:         	zmm_trap	equ	0x37 	; ZMM Trap Vector
              	
7000:         	zmm_capture	equ	0x7000
8000:         	zmm_map		equ	0x8000
C000:         	zmm_top		equ	0xC000
              	
0070:         	zmm_capture_set	equ	0b01110000
007F:         	zmm_capture_res	equ	0b01111111
              	
              	; General Z80 Stuff
0066:         	nmi_address	equ	0x0066
0067:         	nmi_vector	equ	nmi_address+1
              	
              	; NABU Specific Stuff
0000:         	nabu_nctl	equ	0x00	; NABU Control Register
0040:         	nabu_ay_data	equ	0x40	; AY-3-8910 Data Port
0041:         	nabu_at_latch	equ	0x41	; AY-3-8910 Latch Port
              	
              	; -------------------------------------
              	; ******** Additional Includes ********
              	; -------------------------------------
              	
              	#include "MEMORY.asm"
              	;
              	;********************************************************************
              	;*
              	;*                    Z M M   M E M O R Y
              	;* 
              	;*    The ZMM can be configured to have different amounts
              	;*    of memory installed. Instead of dicking around with 
              	;*    on-board jumpers, KRISYS will simply check what banks
              	;*    are available on startup. Memory will be dynamically
              	;*    allocated as needed by the client process.
              	;*
              	;*    Memory can be assigned to specific owners in the code.
              	;*    Valid owner IDs range from 1 to 254. Owner 0 is reserved
              	;*    for unallocatable banks.
              	;*
              	;********************************************************************
              	
              	; ----------------------------
              	; ********  Functions ********
              	; ----------------------------
              	
              	.area	_TEXT
              		
              	; Initalize the memory map
              	; Each bank of the ZMM will be probed, and writable
              	; banks will be recorded on the allocated bank map
              	;
              	; Returns nothing
              	; Uses: AF, BC, DE, HL
0103:         	mem_map_init:
              		; Go to virtual mode
0103: CDCD01  		call	zmm_set_virtual
              		
              		; Reset free bank counter
0106: 3E00    		ld	a,0
0108: 32C702  		ld	(banks_free),a
              		
              		; Write tags to all banks
010B: 0600    		ld	b,0
010D: 78      	0$:	ld	a,b
010E: D333    		out	(zmm_bank_3),a
0110: 3200C0  		ld	(zmm_top),a
0113: ED44    		neg
0115: 3201C0  		ld	(zmm_top+1),a
0118: 04      		inc	b
0119: F20D01  		jp	p,0$
              		
              		; Mark any banks that record correctly
011C: 0600    		ld	b,0
011E: 21C802  		ld	hl,alloc_bank_map
0121: AF      	1$:	xor	a
0122: 77      		ld	(hl),a
0123: 78      		ld	a,b
0124: D333    		out	(zmm_bank_3),a
0126: 3A00C0  		ld	a,(zmm_top)
0129: B8      		cp	b
012A: C24201  		jp	nz,2$
012D: 3A01C0  		ld	a,(zmm_top+1)
0130: 4F      		ld	c,a
0131: 78      		ld	a,b
0132: ED44    		neg
0134: B9      		cp	c
0135: C24201  		jp	nz,2$
              	
              		; Mark it
0138: 3EFF    		ld	a,0xFF
013A: 77      		ld	(hl),a
013B: 3AC702  		ld	a,(banks_free)
013E: 3C      		inc	a
013F: 32C702  		ld	(banks_free),a
              		
              		; Next
0142: 23      	2$:	inc	hl
0143: 04      		inc	b
0144: F22101  		jp	p,1$
              		
              		; Disable virtual mode
0147: CDD801  		call	zmm_set_real
              		
              		; Print out result
014A: 3AC702  		ld	a,(banks_free)
014D: CD1402  		call	tohex
0150: ED535002		ld	(str_mem_init_cnt),de
0154: 112B02  		ld	de,str_mem_init
0157: CDFC01  		call	cpm_print
              		
              		; Do we actually have an acceptable amount of memory?
015A: 3AC702  		ld	a,(banks_free)
015D: 3D      		dec	a
015E: 3D      		dec	a
015F: FAA101  		jp	m,mem_empty
              		
              		; We do, return
0162: C9      		ret
              		
              	; Allocates a bank of memory
              	; Will produce an error if no banks are available,
              	; check (banks_free) to avoid
              	; D = Owner ID (1-254)
              	;
              	; Returns A = Bank #
              	; Uses: AF, BC, HL
0163:         	mem_alloc:
              		; Check and decrement free memory
0163: 3AC702  		ld	a,(banks_free)
0166: 3D      		dec	a
0167: 32C702  		ld	(banks_free),a
016A: FAA101  		jp	m,mem_empty
              		
              		; Look for the first free bank
016D: 21C802  		ld	hl,alloc_bank_map
0170: 018000  		ld	bc,0x0080
0173: 3EFF    		ld	a,0xFF
0175: EDB1    		cpir
              		
              		; Make sure we found something
0177: C2A101  		jp	nz,mem_empty
              		
              		; Save and exit
017A: 2B      		dec	hl
017B: 72      		ld	(hl),d
017C: 01C802  		ld	bc,alloc_bank_map
017F: B7      		or	a
0180: ED42    		sbc	hl,bc
0182: 6F      		ld	l,a
0183: C9      		ret
              		
              	; Frees a bank of memory
              	; Safe to use on banks that are not free / not owned
              	; A = Bank #
              	; D = Owner ID (1-254)
              	;
              	; Returns nothing
              	; Uses: AF, BC, HL
0184:         	mem_free:
              		; Find location in memory
0184: 0600    		ld	b,0
0186: 4F      		ld	c,a
0187: 21C802  		ld	hl,alloc_bank_map
018A: 09      		add	hl,bc
              		
              		; Check owner
018B: 7E      		ld	a,(hl)
018C: BA      		cp	d
018D: C0      		ret	nz
              		
              		; Free bank
018E: 3EFF    		ld	a,0xFF
0190: 77      		ld	(hl),a
              		
              		; Increment banks free
0191: 21C702  		ld	hl,banks_free
0194: 34      		inc	(hl)
0195: C9      		ret
              		
              	; Free all banks by owner
              	; D = Owner ID (1-254)
              	;
              	; Returns nothing
              	; Uses: AF, BC, HL
0196:         	mem_free_all:
              		; Free a bank
0196: AF      		xor	a
0197: F5      	0$:	push	af
0198: CD8401  		call	mem_free
019B: F1      		pop	af
              		
              		; Next bank
019C: 3C      		inc	a
019D: F29701  		jp	p,0$
01A0: C9      		ret
              		
              	; Error out if empty
              	;
              	; Does not return
              	; Uses: N/A
01A1:         	mem_empty:
01A1: 115602  		ld	de,str_mem_empty
01A4: CDFC01  		call	cpm_print
01A7: C30F02  		jp	cpm_exit
              	
              	; -------------------------
              	; ******** Strings ********
              	; -------------------------
              	
              	.area	_DATA
              	
              	; Inital string that prints when the program is started
022B:         	str_mem_init:
022B: 494E4954		defb	'INITIALIZED MEMORY MAP',0x0A,0x0D
022F: 49414C49	
0233: 5A454420	
0237: 4D454D4F	
023B: 5259204D	
023F: 41500A0D	
0243: 42414E4B		defb	'BANK COUNT = '
0247: 20434F55	
024B: 4E54203D	
024F: 20      	
0250:         	str_mem_init_cnt:
0250: 5858480A		defb	'XXH',0x0A,0x0D,'$'
0254: 0D24    	
              		
0256:         	str_mem_empty:
0256: 494E5355		defb	'INSUFFICIENT MEMORY',0x0A,0x0D,'$'
025A: 46464943	
025E: 49454E54	
0262: 204D454D	
0266: 4F52590A	
026A: 0D24    	
              	
              	; ---------------------------
              	; ******** Variables ********
              	; ---------------------------
              	
              	.area	_BSS
              	
              	; Free bank count
02C7:         	banks_free:
02C7: 00      		defs	1
              	
              	; Allocated bank map
              	; This 128 byte table keeps track of every single 16K bank
              	; that exists on the ZMM. Populated on startup
02C8:         	alloc_bank_map:
02C8: 00000000		defs	128
02CC: 00...   	
              	#include "ZMM.asm"
              	;
              	;********************************************************************
              	;*
              	;*                  Z M M   M A N A G E M E N T
              	;* 
              	;*    These routines are used to manage the state of the ZMM.
              	;*    This includes the setting of the registers as well as setting
              	;*    up trap and interrupt stuff.
              	;*
              	;********************************************************************
              	
              	; ----------------------------
              	; ********  Functions ********
              	; ----------------------------
              	
              	.area	_TEXT
              	
              	; Initalize ZMM and reset registers
              	;
              	; Returns nothing
              	; Uses: AF
01AA:         	zmm_init:
              		; Zero out control register
01AA: 3E00    		ld	a,0
01AC: 324803  		ld	(zmm_ctrl_state),a
01AF: 324903  		ld	(zmm_bank_0_state),a
01B2: 324A03  		ld	(zmm_bank_1_state),a
01B5: 324B03  		ld	(zmm_bank_2_state),a
01B8: 324C03  		ld	(zmm_bank_3_state),a
              		
              		; See if we can swing in and out of virtual mode
01BB: CDCD01  		call	zmm_set_virtual
01BE: CDD801  		call	zmm_set_real
              		
              		; Tell the user that the ZMM is read
01C1: 116C02  		ld	de,str_zmm_init
01C4: C3FC01  		jp	cpm_print
              		
              	; Set the ZMM control register to the recorded state
              	; (zmm_ctrl_state) = New value of ZMM control register
              	;
              	; Returns nothing
              	; Uses: AF
01C7:         	zmm_ctrl_set:
01C7: 3A4803  		ld	a,(zmm_ctrl_state)
01CA: D334    		out	(zmm_ctrl),a
01CC: C9      		ret
              		
              	; Go to virtual mode
              	;
              	; Returns nothing
              	; Uses: AF
01CD:         	zmm_set_virtual:
01CD: 3A4803  		ld	a,(zmm_ctrl_state)
01D0: F601    		or	0b00000001
01D2: 324803  		ld	(zmm_ctrl_state),a
01D5: C3C701  		jp	zmm_ctrl_set
              		
              	; Go to real mode
              	;
              	; Returns nothing
              	; Uses: AF
01D8:         	zmm_set_real:
01D8: 3A4803  		ld	a,(zmm_ctrl_state)
01DB: E6FE    		and	0b11111110
01DD: 324803  		ld	(zmm_ctrl_state),a
01E0: C3C701  		jp	zmm_ctrl_set
              	
              		
              	; -------------------------
              	; ******** Strings ********
              	; -------------------------
              	
              	.area	_DATA
              	
              	; Inital string that prints when the program is started
026C:         	str_zmm_init:
026C: 494E4954		defb	'INITIALIZED ZMM',0x0A,0x0D,'$'
0270: 49414C49	
0274: 5A454420	
0278: 5A4D4D0A	
027C: 0D24    	
              		
              	; ---------------------------
              	; ******** Variables ********
              	; ---------------------------
              	
              	.area	_BSS
              	
              	; Reflected state of control register
0348:         	zmm_ctrl_state:
0348: 00      		defs	1
              		
              	; Bank 0 state
0349:         	zmm_bank_0_state:
0349: 00      		defs	1
              		
              	; Bank 1 state
034A:         	zmm_bank_1_state:
034A: 00      		defs	1
              		
              	; Bank 2 state
034B:         	zmm_bank_2_state:
034B: 00      		defs	1
              		
              	; Bank 3 state
034C:         	zmm_bank_3_state:
034C: 00      		defs	1
              		
              	
              	; --------------------------------
              	; ******** KRISYS Startup ********
              	; --------------------------------
              	
              	.area	_TEXT
              		
              		; KRISYS entry point
01E3:         	start:	
              		; Set up stack
01E3: F3      		di
01E4: 310070  		ld	sp,zmm_capture
01E7: 210F02  		ld	hl,cpm_exit
01EA: E5      		push	hl
              		
              		; Print "hello" splash
01EB: 0E09    		ld	c,bdos_print
01ED: 117E02  		ld	de,str_splash
01F0: CD0500  		call	bdos
              		
              		; Initalize subcomponents
01F3: CDAA01  		call	zmm_init
01F6: CD0301  		call	mem_map_init
              		
01F9: C30F02  		jp	cpm_exit
              		
              	; ------------------------------
              	; ******** CP/M Service ********
              	; ------------------------------
              		
              	; Print something to the CP/M console
              	; DE = Address of string to print
              	;
              	; Returns nothing
              	; Uses: All
01FC:         	cpm_print:
              		; Save control register state
01FC: 3A4803  		ld	a,(zmm_ctrl_state)
01FF: F5      		push	af
              		
              		; Go to real mode
0200: CDD801  		call zmm_set_real
              		
              		; Do BDOS call
0203: 0E09    		ld	c,bdos_print
0205: CD0500  		call	bdos
              		
              		; Restore register
0208: F1      		pop	af
0209: 324803  		ld	(zmm_ctrl_state),a
020C: C3C701  		jp	zmm_ctrl_set
              		
              	; Go back to CP/M
              	;
              	; Does not return
              	; Uses: N/A
020F:         	cpm_exit:
020F: 0E00    		ld	c,bdos_exit
0211: CD0500  		call	bdos	
              		
              	; ----------------------
              	; ******** Misc ********
              	; ----------------------
              		
              	; Converts the value into an 8 bit hex number
              	; A = Number to convert
              	;
              	; Returns DE = result
              	; Uses: AF, DE
0214: 57      	tohex:	ld	d,a
0215: CD1F02  		call	0$
0218: 5F      		ld	e,a
0219: 7A      		ld	a,d
021A: CD2302  		call	1$
021D: 57      		ld	d,a
021E: C9      		ret
              		
021F: 1F      	0$:	rra
0220: 1F      		rra
0221: 1F      		rra
0222: 1F      		rra
0223: F6F0    	1$:	or	0xF0
0225: 27      		daa
0226: C6A0    		add	a,0xA0
0228: CE40    		adc	a,0x40
022A: C9      		ret
              	
              	; -------------------------
              	; ******** Strings ********
              	; -------------------------
              	
              	.area	_DATA
              	
              	; Inital string that prints when the program is started
027E:         	str_splash:
027E: 4944454E		defb	'IDENTITY KRISYS HYPERVISOR, CP/M EDT.',0x0A,0x0D
0282: 54495459	
0286: 204B5249	
028A: 53595320	
028E: 48595045	
0292: 52564953	
0296: 4F522C20	
029A: 43502F4D	
029E: 20454454	
02A2: 2E0A0D  	
02A5: 5645522E		defb	'VER. 0.0.1, GAVIN TERSTEEG 2024'
02A9: 20302E30	
02AD: 2E312C20	
02B1: 47415649	
02B5: 4E205445	
02B9: 52535445	
02BD: 45472032	
02C1: 303234  	
              		
              	; Carriage return, line break
02C4:         	str_crlf:
02C4: 0A0D24  		defb	0x0A,0x0D,'$' 
              		


; +++ segments +++

#CODE _TEXT    = $0100 =   256,  size = $012B =   299
#CODE _DATA    = $022B =   555,  size = $009C =   156
#DATA _BSS     = $02C7 =   711,  size = $0086 =   134

; +++ global symbols +++

_BSS             = $02C7 =   711  _BSS    KRISYS.asm:28 (unused)
_BSS_end         = $034D =   845  _BSS    KRISYS.asm:28
_BSS_size        = $0086 =   134  _BSS    KRISYS.asm:28 (unused)
_DATA            = $022B =   555  _DATA   KRISYS.asm:27 (unused)
_DATA_end        = $02C7 =   711  _DATA   KRISYS.asm:27
_DATA_size       = $009C =   156  _DATA   KRISYS.asm:27 (unused)
_TEXT            = $0100 =   256  _TEXT   KRISYS.asm:26 (unused)
_TEXT_end        = $022B =   555  _TEXT   KRISYS.asm:26
_TEXT_size       = $012B =   299  _TEXT   KRISYS.asm:26 (unused)
alloc_bank_map   = $02C8 =   712  _BSS    MEMORY.asm:211
banks_free       = $02C7 =   711  _BSS    MEMORY.asm:205
bdos             = $0005 =     5  _TEXT   KRISYS.asm:49
bdos_con_in      = $0001 =     1  _TEXT   KRISYS.asm:51 (unused)
bdos_con_out     = $0002 =     2  _TEXT   KRISYS.asm:52 (unused)
bdos_exit        = $0000 =     0  _TEXT   KRISYS.asm:50
bdos_print       = $0009 =     9  _TEXT   KRISYS.asm:53
cpm_exit         = $020F =   527  _TEXT   KRISYS.asm:144
cpm_print        = $01FC =   508  _TEXT   KRISYS.asm:123
mem_alloc        = $0163 =   355  _TEXT   MEMORY.asm:103 (unused)
mem_empty        = $01A1 =   417  _TEXT   MEMORY.asm:177
mem_free         = $0184 =   388  _TEXT   MEMORY.asm:135
mem_free_all     = $0196 =   406  _TEXT   MEMORY.asm:161 (unused)
mem_map_init     = $0103 =   259  _TEXT   MEMORY.asm:30
nabu_at_latch    = $0041 =    65  _TEXT   KRISYS.asm:80 (unused)
nabu_ay_data     = $0040 =    64  _TEXT   KRISYS.asm:79 (unused)
nabu_nctl        = $0000 =     0  _TEXT   KRISYS.asm:78 (unused)
nmi_address      = $0066 =   102  _TEXT   KRISYS.asm:74
nmi_vector       = $0067 =   103  _TEXT   KRISYS.asm:75 (unused)
stack_size       = $0032 =    50          KRISYS.asm:31
start            = $01E3 =   483  _TEXT   KRISYS.asm:96
str_crlf         = $02C4 =   708  _DATA   KRISYS.asm:187 (unused)
str_mem_empty    = $0256 =   598  _DATA   MEMORY.asm:195
str_mem_init     = $022B =   555  _DATA   MEMORY.asm:189
str_mem_init_cnt = $0250 =   592  _DATA   MEMORY.asm:192
str_splash       = $027E =   638  _DATA   KRISYS.asm:182
str_zmm_init     = $026C =   620  _DATA   ZMM.asm:77
tohex            = $0214 =   532  _TEXT   KRISYS.asm:157
zmm_addr_hi      = $0032 =    50  _TEXT   KRISYS.asm:62 (unused)
zmm_addr_lo      = $0033 =    51  _TEXT   KRISYS.asm:63 (unused)
zmm_bank_0       = $0030 =    48  _TEXT   KRISYS.asm:56 (unused)
zmm_bank_0_state = $0349 =   841  _BSS    ZMM.asm:91
zmm_bank_1       = $0031 =    49  _TEXT   KRISYS.asm:57 (unused)
zmm_bank_1_state = $034A =   842  _BSS    ZMM.asm:95
zmm_bank_2       = $0032 =    50  _TEXT   KRISYS.asm:58 (unused)
zmm_bank_2_state = $034B =   843  _BSS    ZMM.asm:99
zmm_bank_3       = $0033 =    51  _TEXT   KRISYS.asm:59
zmm_bank_3_state = $034C =   844  _BSS    ZMM.asm:103
zmm_capture      = $7000 = 28672  _TEXT   KRISYS.asm:66
zmm_capture_res  = $007F =   127  _TEXT   KRISYS.asm:71 (unused)
zmm_capture_set  = $0070 =   112  _TEXT   KRISYS.asm:70 (unused)
zmm_ctrl         = $0034 =    52  _TEXT   KRISYS.asm:60
zmm_ctrl_set     = $01C7 =   455  _TEXT   ZMM.asm:44
zmm_ctrl_state   = $0348 =   840  _BSS    ZMM.asm:87
zmm_init         = $01AA =   426  _TEXT   ZMM.asm:22
zmm_isr          = $0030 =    48  _TEXT   KRISYS.asm:61 (unused)
zmm_map          = $8000 = 32768  _TEXT   KRISYS.asm:67 (unused)
zmm_set_real     = $01D8 =   472  _TEXT   ZMM.asm:63
zmm_set_virtual  = $01CD =   461  _TEXT   ZMM.asm:53
zmm_top          = $C000 = 49152  _TEXT   KRISYS.asm:68
zmm_trap         = $0037 =    55  _TEXT   KRISYS.asm:64 (unused)


total time: 0.2023 sec.
no errors
