              	; --------------------------------------
              	; zasm: assemble "ZMMBAS.asm"
              	; date: 2024-08-10 03:19:35
              	; --------------------------------------


              	;
              	;**************************************************************
              	;*
              	;*      Z M M   B A S I C   F U N C T I O N   T E S T
              	;*
              	;*      Tests memory and basic functionality of the ZMM
              	;*      (Z80 MegaMapper). Segmentation as well as I/O
              	;*      traps.
              	;* 
              	;**************************************************************
              		
              	; Equates
0005:         	bdos	equ	0x0005
              	
0000:         	b_exit	equ	0x00
0001:         	b_coin	equ	0x01
0002:         	b_cout	equ	0x02
0009:         	b_print	equ	0x09
              	
0030:         	zm_bnk0	equ	0x30
0031:         	zm_bnk1	equ	0x31
0032:         	zm_bnk2	equ	0x32
0033:         	zm_bnk3	equ	0x33
0034:         	zm_ctrl	equ	0x34
0030:         	zm_isr	equ	0x30
0032:         	zm_a_lo	equ	0x32
0033:         	zm_a_hi	equ	0x33
0037:         	zm_trap	equ	0x37 
8000:         	zm_map	equ	0x8000
C000:         	zm_top	equ	0xC000
              	
0070:         	zm_sset	equ	0b01110000
007F:         	zm_sres	equ	0b01111111
              	
0066:         	nmi_adr	equ	0X0066
0067:         	nmi_vec	equ	nmi_adr+1
              	
0000:         	nb_nctl	equ	0x00		; Control Register
0040:         	nb_ayda	equ	0x40		; AY-3-8910 data port
0041:         	nb_atla	equ	0x41		; AY-3-8910 latch port
              	
              	; Program start
0100:         		org	0x0100
              		
              		; Print "hello" splash
0100: F3      	start:	di
0101: 310040  		ld	sp,0x4000
0104: 0E09    		ld	c,b_print
0106: 112F03  		ld	de,splash
0109: CD0500  		call	bdos
              		
              		; Test #0
010C: 0E09    	test0:	ld	c,b_print
010E: 117903  		ld	de,s_test0
0111: CD0500  		call	bdos
              		
              		; Set up passthru table for virtual mode
0114: 3E01    		ld	a,0b00000001
0116: D334    		out	(zm_ctrl),a
0118: 210080  		ld	hl,zm_map
011B: 75      	0$:	ld	(hl),l
011C: 2C      		inc	l
011D: C21B01  		jp	nz,0$
0120: 3E03    		ld	a,0b00000011
0122: D334    		out	(zm_ctrl),a
0124: 210080  		ld	hl,zm_map
0127: 75      	1$:	ld	(hl),l
0128: 2C      		inc	l
0129: C22701  		jp	nz,1$
              		
              		; Disable virtual mode
012C: 3E00    		ld	a,0b00000000
012E: D334    		out	(zm_ctrl),a
0130: 0E09    		ld	c,b_print
0132: 116803  		ld	de,s_pass
0135: CD0500  		call	bdos
              		
              		; Test #1
0138: 0E09    	test1:	ld	c,b_print
013A: 119703  		ld	de,s_test1
013D: CD0500  		call	bdos
              		
              		; Zero out top 16K of memory
0140: 3E01    		ld	a,0b00000001
0142: D334    		out	(zm_ctrl),a
0144: 2100C0  		ld	hl,zm_top
0147: 1101C0  		ld	de,zm_top+1 
014A: 01FF3F  		ld	bc,0x4000-1
014D: AF      		xor	a
014E: 77      		ld	(hl),a
014F: EDB0    		ldir
              		
              		; Disable virtual mode
0151: 3E00    		ld	a,0b00000000
0153: D334    		out	(zm_ctrl),a
0155: 0E09    		ld	c,b_print
0157: 116803  		ld	de,s_pass
015A: CD0500  		call	bdos
              		
              		; Test #2
015D: 0E09    	test2:	ld	c,b_print
015F: 11B503  		ld	de,s_test2
0162: CD0500  		call	bdos
              		
              		; Enable virtual mode
0165: 3E01    		ld	a,0b00000001
0167: D334    		out	(zm_ctrl),a
              		
              		; Write tags to all pages
0169: 0600    		ld	b,0
016B: 78      	0$:	ld	a,b
016C: D333    		out	(zm_bnk3),a
016E: 3200C0  		ld	(zm_top),a
0171: ED44    		neg
0173: 3201C0  		ld	(zm_top+1),a
0176: 04      		inc	b
0177: C26B01  		jp	nz,0$
              		
              		; Mark any banks that record correctly
017A: 0600    		ld	b,0
017C: 212F04  		ld	hl,bankmap
017F: AF      	1$:	xor	a
0180: 77      		ld	(hl),a
0181: 78      		ld	a,b
0182: D333    		out	(zm_bnk3),a
0184: 3A00C0  		ld	a,(zm_top)
0187: B8      		cp	b
0188: C29901  		jp	nz,2$
018B: 3A01C0  		ld	a,(zm_top+1)
018E: 4F      		ld	c,a
018F: 78      		ld	a,b
0190: ED44    		neg
0192: B9      		cp	c
0193: C29901  		jp	nz,2$
              		
              		; Mark it
0196: 3EFF    		ld	a,0xFF
0198: 77      		ld	(hl),a
              		
              		; Next
0199: 23      	2$:	inc	hl
019A: 04      		inc	b
019B: C27F01  		jp	nz,1$
              		
              		; Disable virtual mode
019E: 3E00    		ld	a,0b00000000
01A0: D334    		out	(zm_ctrl),a
              		
              		; Now try to print everything out
01A2: 212F04  		ld	hl,bankmap
01A5: 0620    		ld	b,32
01A7: 0E08    		ld	c,8
              		
              		; Get bankmap value and set register E
01A9: 1E2E    	3$:	ld	e,'.'
01AB: 7E      		ld	a,(hl)
01AC: B7      		or	a
01AD: CAB201  		jp	z,4$
01B0: 1E58    		ld	e,'X'
              	
              		; Print character
01B2: C5      	4$:	push	bc
01B3: E5      		push	hl
01B4: 0E02    		ld	c,b_cout
01B6: CD0500  		call	bdos
01B9: E1      		pop	hl
01BA: C1      		pop	bc
              		
              		; Do another?
01BB: 23      		inc	hl
01BC: 10EB    		djnz	3$
              	
              		; Print CRLF
01BE: C5      		push	bc
01BF: E5      		push	hl
01C0: 0E09    		ld	c,b_print
01C2: 11D403  		ld	de,s_crlf
01C5: CD0500  		call	bdos
01C8: E1      		pop	hl
01C9: C1      		pop	bc
              		
              		; New line maybe
01CA: 0620    		ld	b,32
01CC: 0D      		dec	c
01CD: C2A901  		jp	nz,3$
              		
              		; Pass
01D0: 0E09    		ld	c,b_print
01D2: 116803  		ld	de,s_pass
01D5: CD0500  		call	bdos
              		
              		; Test #3
01D8: 0E09    	test3:	ld	c,b_print
01DA: 11D703  		ld	de,s_test3
01DD: CD0500  		call	bdos
              		
              		; Start checking bank map for 2 valid banks
01E0: 0600    		ld	b,0
01E2: 212F04  		ld	hl,bankmap
              		
01E5: 7E      	0$:	ld	a,(hl)
01E6: B7      		or	a
01E7: C2F201  		jp	nz,1$
01EA: 23      		inc	hl
01EB: 04      		inc	b
01EC: C2E501  		jp	nz,0$
              		
              		; Fail!
01EF: C3A202  		jp	fail
              	
              		; Save to text bank
01F2: 78      	1$:	ld	a,b
01F3: 322D04  		ld	(textbank),a
01F6: C3FE01  		jp	3$
              		
01F9: 7E      	2$:	ld	a,(hl)
01FA: B7      		or	a
01FB: C20602  		jp	nz,4$
01FE: 23      	3$:	inc	hl
01FF: 04      		inc	b
0200: C2F901  		jp	nz,2$
              		
              		; Fail!
0203: C3A202  		jp	fail
              	
              		; Pass
0206: 78      	4$:	ld	a,b
0207: 322E04  		ld	(databank),a
020A: 0E09    		ld	c,b_print
020C: 116803  		ld	de,s_pass
020F: CD0500  		call	bdos
              		
              		; Test #4
0212: 0E09    	test4:	ld	c,b_print
0214: 11F203  		ld	de,s_test4
0217: CD0500  		call	bdos
              		
              		; Set bank 3 to textbank
021A: 3A2D04  		ld	a,(textbank)
021D: D333    		out	(zm_bnk3),a
              		
              		; Install NMI handler
021F: 3EC3    		ld	a,0xC3
0221: 326600  		ld	(nmi_adr),a
              		
              		; Enable virtual mode
0224: 3E01    		ld	a,0b00000001
0226: D334    		out	(zm_ctrl),a
              		
              		; Copy snippet to virtual memory
0228: 21F302  		ld	hl,snip0
022B: 1100C0  		ld	de,zm_top
022E: 013C00  		ld	bc,snip0_end-snip0
0231: EDB0    		ldir
              		
              		; Just incase of a hardware failure
0233: 21A202  		ld	hl,fail
0236: E5      		push 	hl
              		
              		; Punch in entry address
0237: 1100C0  		ld	de,zm_top
023A: CDDD02  		call	trapset
              		
              		; Place vector
023D: 214D02  		ld	hl,1$
0240: 0600    		ld	b,0
0242: 226700  		ld	(nmi_vec),hl
              		
              		; Kick off RETN to reset trap mode
0245: D337    		out	(zm_trap),a
0247: 00      		nop
0248: ED45    		retn
024A: C3A202  		jp	fail
              	
              		; We should end up here
024D: 3E00    	1$:	ld	a,0b00000000
024F: D334    		out	(zm_ctrl),a
              	
              		; Check register B
0251: 78      		ld	a,b
0252: CDB102  		call	tohex
0255: ED536F03		ld	(s_nfail),de
0259: 05      		dec	b
025A: 05      		dec	b
025B: C2A202  		jp	nz,fail
              	
              		; Pass
025E: 0E09    		ld	c,b_print
0260: 116803  		ld	de,s_pass
0263: CD0500  		call	bdos
              		
              		; Test #5
0266: 0E09    	test5:	ld	c,b_print
0268: 110E04  		ld	de,s_test5
026B: CD0500  		call	bdos
              		
              		; Set bank 0,1,2 to databank
026E: 3A2E04  		ld	a,(databank)
0271: D330    		out	(zm_bnk0),a
0273: D331    		out	(zm_bnk1),a
0275: D332    		out	(zm_bnk2),a
              		
              		; Enable virtual mode
0277: 3E01    		ld	a,0b00000001
0279: D334    		out	(zm_ctrl),a
              		
              		; Punch in entry address
027B: 1102C0  		ld	de,zm_top+2
027E: CDDD02  		call	trapset
              		
              		; Place vector
0281: 219102  		ld	hl,1$
0284: 0600    		ld	b,0
0286: 226700  		ld	(nmi_vec),hl
              		
              		; Kick off RETN to reset trap mode
0289: D337    		out	(zm_trap),a
028B: 00      		nop
028C: ED45    		retn
028E: C3A202  		jp	fail
              	
              		; We should end up here
0291: 3E00    	1$:	ld	a,0b00000000
0293: D334    		out	(zm_ctrl),a
              		
              		; Pass
0295: 0E09    		ld	c,b_print
0297: 116803  		ld	de,s_pass
029A: CD0500  		call	bdos
              		
              	; Done
029D: 0E00    	exit:	ld	c,b_exit
029F: CD0500  		call	bdos
              		
              	; Fail!
02A2: 3E00    	fail:	ld	a,0b00000000
02A4: D334    		out	(zm_ctrl),a
02A6: 0E09    		ld	c,b_print
02A8: 116F03  		ld	de,s_nfail
02AB: CD0500  		call	bdos
02AE: C39D02  		jp	exit
              		
              	; Converts the value into an 8 bit hex number
              	; A = Number to convert
              	;
              	; Returns DE = result
              	; uses: AF, DE
02B1: 57      	tohex:	ld	d,a
02B2: CDBC02  		call	0$
02B5: 5F      		ld	e,a
02B6: 7A      		ld	a,d
02B7: CDC002  		call	1$
02BA: 57      		ld	d,a
02BB: C9      		ret
              		
02BC: 1F      	0$:	rra
02BD: 1F      		rra
02BE: 1F      		rra
02BF: 1F      		rra
02C0: F6F0    	1$:	or	0xF0
02C2: 27      		daa
02C3: C6A0    		add	a,0xA0
02C5: CE40    		adc	a,0x40
02C7: C9      		ret
              		
              	; Turns off all maskable interrupts to stop traps from occuring
              	;
              	; uses: AF
02C8: 3E07    	intoff:	ld	a,0x07
02CA: D341    		out	(nb_atla),a	; AY register = 7
02CC: DB40    		in	a,(nb_ayda)
02CE: E63F    		and	0x3F
02D0: F640    		or	0x40
02D2: D340    		out	(nb_ayda),a	; Configure AY port I/O
              		
02D4: 3E0E    		ld	a,0x0E
02D6: D341    		out	(nb_atla),a	; AY register = 14
02D8: 3E00    		ld	a,0x00
02DA: D340    		out	(nb_ayda),a	; All interrupts disabled
              		
02DC: C9      		ret
              		
              	; Sets the trap return address
              	; DE = return address
              	;
              	; uses: AF, HL
02DD: 210000  	trapset:ld	hl,0
02E0: 39      		add	hl,sp
02E1: 23      		inc	hl
02E2: 23      		inc	hl
02E3: 3E7F    		ld	a,zm_sres
02E5: A4      		and	h
02E6: F670    		or	zm_sset
02E8: 67      		ld	h,a
02E9: 73      		ld	(hl),e
02EA: 23      		inc	hl
02EB: 3E7F    		ld	a,zm_sres
02ED: A4      		and	h
02EE: F670    		or	zm_sset
02F0: 67      		ld	h,a
02F1: 72      		ld	(hl),d
02F2: C9      		ret
              		
              	; Snippets
02F3:         	snip0:
              	
              		; Jump table
02F3: 1802    		jr	snip0_a
02F5: 1827    		jr	snip0_b
              	
              		; Play with register B, and then trap out
02F7: 00      	snip0_a:nop
02F8: 0601    		ld	b,1
02FA: 00      		nop
02FB: 0602    		ld	b,2
02FD: DB37    		in	a,(zm_trap)
02FF: 0603    		ld	b,3
              	
              		; Blink light
0301: 3E11    	0$:	ld	a,0x11
0303: D300    		out	(nb_nctl),a
              		
0305: 010000  		ld	bc,0
0308: E5      	1$:	push	hl
0309: E1      		pop	hl
030A: 10FC    		djnz	1$
030C: 0D      		dec	c
030D: 20F9    		jr	nz,1$
              		
030F: 3E01    		ld	a,0x01
0311: D300    		out	(nb_nctl),a
              		
0313: 00      	2$:	nop
0314: 00      		nop
0315: 00      		nop
0316: 00      		nop
0317: 10FA    		djnz	2$
0319: 0D      		dec	c
031A: 20F7    		jr	nz,2$
031C: 18E3    		jr	0$
              		
              		; Overwrite the first 48KB of memory, and then trap
031E: 210000  	snip0_b:ld	hl,0
0321: 110100  		ld	de,1
0324: 01FFBF  		ld	bc,0x0C000-1
0327: 3600    		ld	(hl),0
0329: EDB0    		ldir
              		
032B: D337    		out	(zm_trap),a
032D: 18FE    	0$:	jr	0$
              	
032F:         	snip0_end:
              		
              	
              	; Strings
032F:         	splash:
032F: 5A4D4D20		defb	'ZMM Basic Functionality Test',0x0A,0x0D
0333: 42617369	
0337: 63204675	
033B: 6E637469	
033F: 6F6E616C	
0343: 69747920	
0347: 54657374	
034B: 0A0D    	
034D: 52657620		defb	'Rev 1a, tergav17 (Gavin)',0x0A,0x0D,'$' 
0351: 31612C20	
0355: 74657267	
0359: 61763137	
035D: 20284761	
0361: 76696E29	
0365: 0A0D24  	
              		
0368:         	s_pass:
0368: 50415353		defb	'PASS',0x0A,0x0D,'$'
036C: 0A0D24  	
              		
036F:         	s_nfail
036F: 585820  		defb	'XX '
              		
0372:         	s_fail:
0372: 4641494C		defb	'FAIL',0x0A,0x0D,'$'
0376: 0A0D24  	
              		
0379:         	s_test0:
0379: 54455354		defb	'TEST 0: Check mapping basic: $'
037D: 20303A20	
0381: 43686563	
0385: 6B206D61	
0389: 7070696E	
038D: 67206261	
0391: 7369633A	
0395: 2024    	
              		
0397:         	s_test1:
0397: 54455354		defb	'TEST 1: Check upper overlay: $'
039B: 20313A20	
039F: 43686563	
03A3: 6B207570	
03A7: 70657220	
03AB: 6F766572	
03AF: 6C61793A	
03B3: 2024    	
              		
03B5:         	s_test2:
03B5: 54455354		defb	'TEST 2: Check memory banking...'
03B9: 20323A20	
03BD: 43686563	
03C1: 6B206D65	
03C5: 6D6F7279	
03C9: 2062616E	
03CD: 6B696E67	
03D1: 2E2E2E  	
              		
03D4:         	s_crlf:	
03D4: 0A0D24  		defb	0x0A,0x0D,'$'
              		
03D7:         	s_test3:
03D7: 54455354		defb	'TEST 3: Check bank map... $'
03DB: 20333A20	
03DF: 43686563	
03E3: 6B206261	
03E7: 6E6B206D	
03EB: 61702E2E	
03EF: 2E2024  	
              		
03F2:         	s_test4:
03F2: 54455354		defb	'TEST 4: Trap engagement... $'
03F6: 20343A20	
03FA: 54726170	
03FE: 20656E67	
0402: 6167656D	
0406: 656E742E	
040A: 2E2E2024	
              		
040E:         	s_test5:
040E: 54455354		defb	'TEST 5: Check full overlay... $'
0412: 20353A20	
0416: 43686563	
041A: 6B206675	
041E: 6C6C206F	
0422: 7665726C	
0426: 61792E2E	
042A: 2E2024  	
              		
              	; Variables
042D:         	textbank:
042D: 00      		defb	0
              		
042E:         	databank:
042E: 00      		defb	0
              		
              	; Heap
042F:         	heap:
              	
              	; Area to keep track of allocated banks
042F:         	bankmap	equ	heap	; 256 bytes


; +++ segments +++

#CODE          = $0100 =   256,  size = $032F =   815

; +++ global symbols +++

_end      = $042F =  1071          ZMMBAS.asm:43 (unused)
_size     = $032F =   815          ZMMBAS.asm:43 (unused)
b_coin    = $0001 =     1          ZMMBAS.asm:16 (unused)
b_cout    = $0002 =     2          ZMMBAS.asm:17
b_exit    = $0000 =     0          ZMMBAS.asm:15
b_print   = $0009 =     9          ZMMBAS.asm:18
bankmap   = $042F =  1071          ZMMBAS.asm:501
bdos      = $0005 =     5          ZMMBAS.asm:13
databank  = $042E =  1070          ZMMBAS.asm:494
exit      = $029D =   669          ZMMBAS.asm:332
fail      = $02A2 =   674          ZMMBAS.asm:336
heap      = $042F =  1071          ZMMBAS.asm:498
intoff    = $02C8 =   712          ZMMBAS.asm:369 (unused)
nb_atla   = $0041 =    65          ZMMBAS.asm:40
nb_ayda   = $0040 =    64          ZMMBAS.asm:39
nb_nctl   = $0000 =     0          ZMMBAS.asm:38
nmi_adr   = $0066 =   102          ZMMBAS.asm:35
nmi_vec   = $0067 =   103          ZMMBAS.asm:36
s_crlf    = $03D4 =   980          ZMMBAS.asm:478
s_fail    = $0372 =   882          ZMMBAS.asm:466 (unused)
s_nfail   = $036F =   879          ZMMBAS.asm:463
s_pass    = $0368 =   872          ZMMBAS.asm:460
s_test0   = $0379 =   889          ZMMBAS.asm:469
s_test1   = $0397 =   919          ZMMBAS.asm:472
s_test2   = $03B5 =   949          ZMMBAS.asm:475
s_test3   = $03D7 =   983          ZMMBAS.asm:481
s_test4   = $03F2 =  1010          ZMMBAS.asm:484
s_test5   = $040E =  1038          ZMMBAS.asm:487
snip0     = $02F3 =   755          ZMMBAS.asm:405
snip0_a   = $02F7 =   759          ZMMBAS.asm:412
snip0_b   = $031E =   798          ZMMBAS.asm:443
snip0_end = $032F =   815          ZMMBAS.asm:452
splash    = $032F =   815          ZMMBAS.asm:456
start     = $0100 =   256          ZMMBAS.asm:46 (unused)
test0     = $010C =   268          ZMMBAS.asm:53 (unused)
test1     = $0138 =   312          ZMMBAS.asm:79 (unused)
test2     = $015D =   349          ZMMBAS.asm:101 (unused)
test3     = $01D8 =   472          ZMMBAS.asm:193 (unused)
test4     = $0212 =   530          ZMMBAS.asm:234 (unused)
test5     = $0266 =   614          ZMMBAS.asm:293 (unused)
textbank  = $042D =  1069          ZMMBAS.asm:491
tohex     = $02B1 =   689          ZMMBAS.asm:348
trapset   = $02DD =   733          ZMMBAS.asm:387
zm_a_hi   = $0033 =    51          ZMMBAS.asm:27 (unused)
zm_a_lo   = $0032 =    50          ZMMBAS.asm:26 (unused)
zm_bnk0   = $0030 =    48          ZMMBAS.asm:20
zm_bnk1   = $0031 =    49          ZMMBAS.asm:21
zm_bnk2   = $0032 =    50          ZMMBAS.asm:22
zm_bnk3   = $0033 =    51          ZMMBAS.asm:23
zm_ctrl   = $0034 =    52          ZMMBAS.asm:24
zm_isr    = $0030 =    48          ZMMBAS.asm:25 (unused)
zm_map    = $8000 = 32768          ZMMBAS.asm:29
zm_sres   = $007F =   127          ZMMBAS.asm:33
zm_sset   = $0070 =   112          ZMMBAS.asm:32
zm_top    = $C000 = 49152          ZMMBAS.asm:30
zm_trap   = $0037 =    55          ZMMBAS.asm:28


total time: 0.0035 sec.
no errors
