              	; --------------------------------------
              	; zasm: assemble "ZMMBAS.asm"
              	; date: 2024-08-08 23:15:34
              	; --------------------------------------


              	;
              	;**************************************************************
              	;*
              	;*      Z M M   B A S I C   F U N C T I O N   T E S T
              	;*
              	;*      Tests memory and basic functionality of the ZMM
              	;*      (Z80 MegaMapper). Segmentation as well as I/O
              	;*      traps.
              	;* 
              	;**************************************************************
              		
              	; Equates
0005:         	bdos	equ	0x0005
              	
0000:         	b_exit	equ	0x00
0001:         	b_coin	equ	0x01
0002:         	b_cout	equ	0x02
0009:         	b_print	equ	0x09
              	
0030:         	zm_bnk0	equ	0x30
0031:         	zm_bnk1	equ	0x31
0032:         	zm_bnk2	equ	0x32
0033:         	zm_bnk3	equ	0x33
0034:         	zm_ctrl	equ	0x34
0030:         	zm_isr	equ	0x30
0032:         	zm_a_lo	equ	0x32
0033:         	zm_a_hi	equ	0x33
0037:         	zm_trap	equ	0x37 
8000:         	zm_map	equ	0x8000
C000:         	zm_top	equ	0xC000
              	
0070:         	zm_sset	equ	0b01110000
007F:         	zm_sres	equ	0b01111111
              	
0066:         	nmi_adr	equ	0X0066
0067:         	nmi_vec	equ	nmi_adr+1
              	
0000:         	nb_nctl	equ	0x00		; Control Register
0040:         	nb_ayda	equ	0x40		; AY-3-8910 data port
0041:         	nb_atla	equ	0x41		; AY-3-8910 latch port
              	
              	; Program start
0100:         		org	0x0100
              		
              		; Print "hello" splash
0100: F3      	start:	di
0101: 310040  		ld	sp,0x4000
0104: 0E09    		ld	c,b_print
0106: 11E202  		ld	de,splash
0109: CD0500  		call	bdos
              		
              		; Test #0
010C: 0E09    	test0:	ld	c,b_print
010E: 112C03  		ld	de,s_test0
0111: CD0500  		call	bdos
              		
              		; Set up passthru table for virtual mode
0114: 3E01    		ld	a,0b00000001
0116: D334    		out	(zm_ctrl),a
0118: 210080  		ld	hl,zm_map
011B: 75      	0$:	ld	(hl),l
011C: 2C      		inc	l
011D: C21B01  		jp	nz,0$
0120: 3E05    		ld	a,0b00000101
0122: D334    		out	(zm_ctrl),a
0124: 210080  		ld	hl,zm_map
0127: 75      	1$:	ld	(hl),l
0128: 2C      		inc	l
0129: C22701  		jp	nz,1$
              		
              		; Disable virtual mode
012C: 3E00    		ld	a,0b00000000
012E: D334    		out	(zm_ctrl),a
0130: 0E09    		ld	c,b_print
0132: 111B03  		ld	de,s_pass
0135: CD0500  		call	bdos
              		
              		; Test #1
0138: 0E09    	test1:	ld	c,b_print
013A: 114A03  		ld	de,s_test1
013D: CD0500  		call	bdos
              		
              		; Zero out top 16K of memory
0140: 3E01    		ld	a,0b00000001
0142: D334    		out	(zm_ctrl),a
0144: 2100C0  		ld	hl,zm_top
0147: 1101C0  		ld	de,zm_top+1 
014A: 01FF3F  		ld	bc,0x4000-1
014D: AF      		xor	a
014E: 77      		ld	(hl),a
014F: EDB0    		ldir
              		
              		; Disable virtual mode
0151: 3E00    		ld	a,0b00000000
0153: D334    		out	(zm_ctrl),a
0155: 0E09    		ld	c,b_print
0157: 111B03  		ld	de,s_pass
015A: CD0500  		call	bdos
              		
              		; Test #2
015D: 0E09    	test2:	ld	c,b_print
015F: 116903  		ld	de,s_test2
0162: CD0500  		call	bdos
              		
              		; Enable virtual mode
0165: 3E01    		ld	a,0b00000001
0167: D334    		out	(zm_ctrl),a
              		
              		; Write tags to all pages
0169: 0600    		ld	b,0
016B: 78      	0$:	ld	a,b
016C: D333    		out	(zm_bnk3),a
016E: 3200C0  		ld	(zm_top),a
0171: ED44    		neg
0173: 3201C0  		ld	(zm_top+1),a
0176: 04      		inc	b
0177: C26B01  		jp	nz,0$
              		
              		; Mark any banks that record correctly
017A: 0600    		ld	b,0
017C: 21C403  		ld	hl,bankmap
017F: AF      	1$:	xor	a
0180: 77      		ld	(hl),a
0181: 78      		ld	a,b
0182: D333    		out	(zm_bnk3),a
0184: 3A00C0  		ld	a,(zm_top)
0187: B8      		cp	b
0188: C29901  		jp	nz,2$
018B: 3A01C0  		ld	a,(zm_top+1)
018E: 4F      		ld	c,a
018F: 78      		ld	a,b
0190: ED44    		neg
0192: B9      		cp	c
0193: C29901  		jp	nz,2$
              		
              		; Mark it
0196: 3EFF    		ld	a,0xFF
0198: 77      		ld	(hl),a
              		
              		; Next
0199: 23      	2$:	inc	hl
019A: 04      		inc	b
019B: C27F01  		jp	nz,1$
              		
              		; Disable virtual mode
019E: 3E00    		ld	a,0b00000000
01A0: D334    		out	(zm_ctrl),a
              		
              		; Now try to print everything out
01A2: 21C403  		ld	hl,bankmap
01A5: 0620    		ld	b,32
01A7: 0E08    		ld	c,8
              		
              		; Get bankmap value and set register E
01A9: 1E2E    	3$:	ld	e,'.'
01AB: 7E      		ld	a,(hl)
01AC: B7      		or	a
01AD: CAB201  		jp	z,4$
01B0: 1E58    		ld	e,'X'
              	
              		; Print character
01B2: C5      	4$:	push	bc
01B3: E5      		push	hl
01B4: 0E02    		ld	c,b_cout
01B6: CD0500  		call	bdos
01B9: E1      		pop	hl
01BA: C1      		pop	bc
              		
              		; Do another?
01BB: 23      		inc	hl
01BC: 10EB    		djnz	3$
              	
              		; Print CRLF
01BE: C5      		push	bc
01BF: E5      		push	hl
01C0: 0E09    		ld	c,b_print
01C2: 118803  		ld	de,s_crlf
01C5: CD0500  		call	bdos
01C8: E1      		pop	hl
01C9: C1      		pop	bc
              		
              		; New line maybe
01CA: 0620    		ld	b,32
01CC: 0D      		dec	c
01CD: C2A901  		jp	nz,3$
              		
              		; Pass
01D0: 0E09    		ld	c,b_print
01D2: 111B03  		ld	de,s_pass
01D5: CD0500  		call	bdos
              		
              		; Test #3
01D8: 0E09    	test3:	ld	c,b_print
01DA: 118B03  		ld	de,s_test3
01DD: CD0500  		call	bdos
              		
              		; Start checking bank map for 2 valid banks
01E0: 0600    		ld	b,0
01E2: 21C403  		ld	hl,bankmap
              		
01E5: 7E      	0$:	ld	a,(hl)
01E6: B7      		or	a
01E7: C2F201  		jp	nz,1$
01EA: 23      		inc	hl
01EB: 04      		inc	b
01EC: C2E501  		jp	nz,0$
              		
              		; Fail!
01EF: C37D02  		jp	fail
              	
              		; Save to text bank
01F2: 78      	1$:	ld	a,b
01F3: 32C203  		ld	(textbank),a
01F6: C3FE01  		jp	3$
              		
01F9: 7E      	2$:	ld	a,(hl)
01FA: B7      		or	a
01FB: C20602  		jp	nz,4$
01FE: 23      	3$:	inc	hl
01FF: 04      		inc	b
0200: C2F901  		jp	nz,2$
              		
              		; Fail!
0203: C37D02  		jp	fail
              	
              		; Pass
0206: 78      	4$:	ld	a,b
0207: 32C303  		ld	(databank),a
020A: 0E09    		ld	c,b_print
020C: 111B03  		ld	de,s_pass
020F: CD0500  		call	bdos
              		
              		; Test #4
0212: 0E09    	test4:	ld	c,b_print
0214: 11A603  		ld	de,s_test4
0217: CD0500  		call	bdos
              		
              		; Disable interrupts
021A: CDA302  		call	intoff
              		
              		; Set bank 3 to textbank
021D: 3AC203  		ld	a,(textbank)
0220: D333    		out	(zm_bnk3),a
              		
              		; Install NMI handler
0222: 3EC3    		ld	a,0xC3
0224: 326600  		ld	(nmi_adr),a
              		
              		; Enable virtual mode
0227: 3E01    		ld	a,0b00000001
0229: D334    		out	(zm_ctrl),a
              		
              		; Copy snippet to virtual memory
022B: 21B802  		ld	hl,snip0
022E: 1100C0  		ld	de,zm_top
0231: 012A00  		ld	bc,snip0_e-snip0
0234: EDB0    		ldir
              		
              		; Punch in entry address
0236: 217D02  		ld	hl,fail
0239: E5      		push 	hl
023A: 210000  		ld	hl,0
023D: 39      		add	hl,sp
023E: 3E7F    		ld	a,zm_sres
0240: A4      		and	h
0241: F670    		or	zm_sset
0243: 67      		ld	h,a
0244: 3600    		ld	(hl),zm_top&0xFF
0246: 23      		inc	hl
0247: 3E7F    		ld	a,zm_sres
0249: A4      		and	h
024A: F670    		or	zm_sset
024C: 67      		ld	h,a
024D: 36C0    		ld	(hl),zm_top>>8
              		
              		; Place vector
024F: 215F02  		ld	hl,1$
0252: 0600    		ld	b,0
0254: 226700  		ld	(nmi_vec),hl
              		
              		; Kick off RETN to reset trap mode
0257: D337    		out	(zm_trap),a
0259: 00      		nop
025A: ED45    		retn
025C: C37D02  		jp	fail
              	
              		; We should end up here
025F: 3E00    	1$:	ld	a,0b00000000
0261: D334    		out	(zm_ctrl),a
              	
              		; Check register B
0263: 78      		ld	a,b
0264: CD8C02  		call	tohex
0267: ED532203		ld	(s_nfail),de
026B: 05      		dec	b
026C: 05      		dec	b
026D: C27D02  		jp	nz,fail
              	
              		; Pass
0270: 0E09    		ld	c,b_print
0272: 111B03  		ld	de,s_pass
0275: CD0500  		call	bdos
              		
              		; Done
0278: 0E00    	exit:	ld	c,b_exit
027A: CD0500  		call	bdos
              		
              		; Fail!
027D: 3E00    	fail:	ld	a,0b00000000
027F: D334    		out	(zm_ctrl),a
0281: 0E09    		ld	c,b_print
0283: 112203  		ld	de,s_nfail
0286: CD0500  		call	bdos
0289: C37802  		jp	exit
              		
              	; Converts the value into an 8 bit hex number
              	; A = Number to convert
              	;
              	; Returns DE = result
              	; uses: DE
028C: 57      	tohex:	ld	d,a
028D: CD9702  		call	0$
0290: 5F      		ld	e,a
0291: 7A      		ld	a,d
0292: CD9B02  		call	1$
0295: 57      		ld	d,a
0296: C9      		ret
              		
0297: 1F      	0$:	rra
0298: 1F      		rra
0299: 1F      		rra
029A: 1F      		rra
029B: F6F0    	1$:	or	0xF0
029D: 27      		daa
029E: C6A0    		add	a,0xA0
02A0: CE40    		adc	a,0x40
02A2: C9      		ret
              		
              	; Turns off all maskable interrupts to stop traps from occuring
02A3: 3E07    	intoff:	ld	a,0x07
02A5: D341    		out	(nb_atla),a	; AY register = 7
02A7: DB40    		in	a,(nb_ayda)
02A9: E63F    		and	0x3F
02AB: F640    		or	0x40
02AD: D340    		out	(nb_ayda),a	; Configure AY port I/O
              		
02AF: 3E0E    		ld	a,0x0E
02B1: D341    		out	(nb_atla),a	; AY register = 14
02B3: 3E00    		ld	a,0x00
02B5: D340    		out	(nb_ayda),a	; All interrupts disabled
02B7: C9      		ret
              		
              		
              	; Snippets
02B8:         	snip0:
              	
              		; Play with register B, and then trap out
02B8: 00      		nop
02B9: 0601    		ld	b,1
02BB: 00      		nop
02BC: 0602    		ld	b,2
02BE: DB37    		in	a,(zm_trap)
02C0: 00      		nop
02C1: 0603    		ld	b,3
              	
              		; Blink light
02C3: 3E11    	0$:	ld	a,0x11
02C5: D300    		out	(nb_nctl),a
              		
02C7: 010000  		ld	bc,0
02CA: 00      	1$:	nop
02CB: 00      		nop
02CC: 00      		nop
02CD: 00      		nop
02CE: 10FA    		djnz	1$
02D0: 0D      		dec	c
02D1: 20F7    		jr	nz,1$
              		
02D3: 3E01    		ld	a,0x01
02D5: D300    		out	(nb_nctl),a
              		
02D7: 00      	2$:	nop
02D8: 00      		nop
02D9: 00      		nop
02DA: 00      		nop
02DB: 10FA    		djnz	2$
02DD: 0D      		dec	c
02DE: 20F7    		jr	nz,2$
02E0: 18E1    		jr	0$
              	
02E2:         	snip0_e:
              		
              	
              	; Strings
02E2:         	splash:
02E2: 5A4D4D20		defb	'ZMM Basic Functionality Test',0x0A,0x0D
02E6: 42617369	
02EA: 63204675	
02EE: 6E637469	
02F2: 6F6E616C	
02F6: 69747920	
02FA: 54657374	
02FE: 0A0D    	
0300: 52657620		defb	'Rev 1a, tergav17 (Gavin)',0x0A,0x0D,'$' 
0304: 31612C20	
0308: 74657267	
030C: 61763137	
0310: 20284761	
0314: 76696E29	
0318: 0A0D24  	
              		
031B:         	s_pass:
031B: 50415353		defb	'PASS',0x0A,0x0D,'$'
031F: 0A0D24  	
              		
0322:         	s_nfail
0322: 585820  		defb	'XX '
              		
0325:         	s_fail:
0325: 4641494C		defb	'FAIL',0x0A,0x0D,'$'
0329: 0A0D24  	
              		
032C:         	s_test0:
032C: 54455354		defb	'TEST 0: Check mapping basic: $'
0330: 20303A20	
0334: 43686563	
0338: 6B206D61	
033C: 7070696E	
0340: 67206261	
0344: 7369633A	
0348: 2024    	
              		
034A:         	s_test1:
034A: 54455354		defb	'TEST 1: Check memory overlay: $'
034E: 20313A20	
0352: 43686563	
0356: 6B206D65	
035A: 6D6F7279	
035E: 206F7665	
0362: 726C6179	
0366: 3A2024  	
              		
0369:         	s_test2:
0369: 54455354		defb	'TEST 2: Check memory banking...'
036D: 20323A20	
0371: 43686563	
0375: 6B206D65	
0379: 6D6F7279	
037D: 2062616E	
0381: 6B696E67	
0385: 2E2E2E  	
              		
0388:         	s_crlf:	
0388: 0A0D24  		defb	0x0A,0x0D,'$'
              		
038B:         	s_test3:
038B: 54455354		defb	'TEST 3: Check bank map... $'
038F: 20333A20	
0393: 43686563	
0397: 6B206261	
039B: 6E6B206D	
039F: 61702E2E	
03A3: 2E2024  	
              		
03A6:         	s_test4:
03A6: 54455354		defb	'TEST 4: Trap engagement... $'
03AA: 20343A20	
03AE: 54726170	
03B2: 20656E67	
03B6: 6167656D	
03BA: 656E742E	
03BE: 2E2E2024	
              		
              	; Variables
03C2:         	textbank:
03C2: 00      		defb	0
              		
03C3:         	databank:
03C3: 00      		defb	0
              		
              	; Heap
03C4:         	heap:
              	
              	; Area to keep track of allocated banks
03C4:         	bankmap	equ	heap	; 256 bytes


; +++ segments +++

#CODE          = $0100 =   256,  size = $02C4 =   708

; +++ global symbols +++

_end     = $03C4 =   964          ZMMBAS.asm:43 (unused)
_size    = $02C4 =   708          ZMMBAS.asm:43 (unused)
b_coin   = $0001 =     1          ZMMBAS.asm:16 (unused)
b_cout   = $0002 =     2          ZMMBAS.asm:17
b_exit   = $0000 =     0          ZMMBAS.asm:15
b_print  = $0009 =     9          ZMMBAS.asm:18
bankmap  = $03C4 =   964          ZMMBAS.asm:437
bdos     = $0005 =     5          ZMMBAS.asm:13
databank = $03C3 =   963          ZMMBAS.asm:430
exit     = $0278 =   632          ZMMBAS.asm:305
fail     = $027D =   637          ZMMBAS.asm:309
heap     = $03C4 =   964          ZMMBAS.asm:434
intoff   = $02A3 =   675          ZMMBAS.asm:340
nb_atla  = $0041 =    65          ZMMBAS.asm:40
nb_ayda  = $0040 =    64          ZMMBAS.asm:39
nb_nctl  = $0000 =     0          ZMMBAS.asm:38
nmi_adr  = $0066 =   102          ZMMBAS.asm:35
nmi_vec  = $0067 =   103          ZMMBAS.asm:36
s_crlf   = $0388 =   904          ZMMBAS.asm:417
s_fail   = $0325 =   805          ZMMBAS.asm:405 (unused)
s_nfail  = $0322 =   802          ZMMBAS.asm:402
s_pass   = $031B =   795          ZMMBAS.asm:399
s_test0  = $032C =   812          ZMMBAS.asm:408
s_test1  = $034A =   842          ZMMBAS.asm:411
s_test2  = $0369 =   873          ZMMBAS.asm:414
s_test3  = $038B =   907          ZMMBAS.asm:420
s_test4  = $03A6 =   934          ZMMBAS.asm:423
snip0    = $02B8 =   696          ZMMBAS.asm:355
snip0_e  = $02E2 =   738          ZMMBAS.asm:391
splash   = $02E2 =   738          ZMMBAS.asm:395
start    = $0100 =   256          ZMMBAS.asm:46 (unused)
test0    = $010C =   268          ZMMBAS.asm:53 (unused)
test1    = $0138 =   312          ZMMBAS.asm:79 (unused)
test2    = $015D =   349          ZMMBAS.asm:101 (unused)
test3    = $01D8 =   472          ZMMBAS.asm:193 (unused)
test4    = $0212 =   530          ZMMBAS.asm:234 (unused)
textbank = $03C2 =   962          ZMMBAS.asm:427
tohex    = $028C =   652          ZMMBAS.asm:321
zm_a_hi  = $0033 =    51          ZMMBAS.asm:27 (unused)
zm_a_lo  = $0032 =    50          ZMMBAS.asm:26 (unused)
zm_bnk0  = $0030 =    48          ZMMBAS.asm:20 (unused)
zm_bnk1  = $0031 =    49          ZMMBAS.asm:21 (unused)
zm_bnk2  = $0032 =    50          ZMMBAS.asm:22 (unused)
zm_bnk3  = $0033 =    51          ZMMBAS.asm:23
zm_ctrl  = $0034 =    52          ZMMBAS.asm:24
zm_isr   = $0030 =    48          ZMMBAS.asm:25 (unused)
zm_map   = $8000 = 32768          ZMMBAS.asm:29
zm_sres  = $007F =   127          ZMMBAS.asm:33
zm_sset  = $0070 =   112          ZMMBAS.asm:32
zm_top   = $C000 = 49152          ZMMBAS.asm:30
zm_trap  = $0037 =    55          ZMMBAS.asm:28


total time: 0.0033 sec.
no errors
